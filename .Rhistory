milkMetab_taxonomy = taxonomy
milkMetab_timepoints = timepoints
sharedSubjects = intersect(intersect(faeces_subjectMeta$subject, milk_subjectMeta$subject), milkMetab_subjectMeta$subject)
faeces_homogenized = faeces_df[faeces_subjectMeta$subject %in% sharedSubjects,,]
milk_homogenized = milk_df[milk_subjectMeta$subject %in% sharedSubjects,,]
milkMetab_homogenized = milkMetab_df[milkMetab_subjectMeta$subject %in% sharedSubjects,,]
homogenized_subjectMeta = faeces_subjectMeta %>% filter(subject %in% sharedSubjects) %>% arrange(subject)
datasets = list(faeces_homogenized, milk_homogenized, milkMetab_homogenized)
modes = list(c(1,2,3),c(1,4,5),c(1,6,7))
Z = setupCMTFdata(datasets, modes)
FMS_result = investigateFMS(datasets, modes, sharedMode=1, numFolds=12, numCores=12, jackKnife=TRUE)
FMS_result$plot
model = cmtf_opt(Z, 2, nstart=100, numCores=12)
model$Fac[[1]]
model = cmtf_opt(Z, 2, nstart=1, initialization="nvec")
model$f
model$Fac[[1]] %>% tail
model$Fac[[2]] %>% tail
model$init
model$init[[1]] %>% tail
init = initializeCMTF(Z, 2, initialization="nvec")
init[[1]]
init[[2]]
init[[2]][,1] = -1 * init[[2]][,1]
init[[2]]
init[[3]]
init[[3]][,1] = -1 * init[[3]][,1]
init[[4]]
init[[4]][,2] = -1 * init[[4]][,2]
init[[5]]
init[[6]]
init[[6]] = -1 * init[[6]]
init[[6]]
init[[7]]
init[[7]][,1] = -1 * init[[7]][,1]
init
opt = list("fn"=function(x){return(CMTFtoolbox::cmtf_fun(x,Z))}, "gr"=function(x){return(CMTFtoolbox::cmtf_gradient(x,Z))})
model = mize::mize(par=init, fg=opt, max_iter=10000, max_fn=100000, abs_tol=1e-8, rel_tol=1e-8, grad_tol=1e-10, method="CG", cg_update="HS", line_search="MT")
model = mize::mize(par=fac_to_vect(init), fg=opt, max_iter=10000, max_fn=100000, abs_tol=1e-8, rel_tol=1e-8, grad_tol=1e-10, method="CG", cg_update="HS", line_search="MT")
model
model$ff
model$f
model$par
vect_to_fac(model$par)
vect_to_fac(model$par, Z)
A = read.csv("./CMTF_test_A.csv")
A = read.csv("./Rasmus/CMTF_test_A.csv")
A = read.csv("./Rasmus/CMTF_test_A.csv", header=FALSE)
B = read.csv("./Rasmus/CMTF_test_B.csv", header=FALSE)
C = read.csv("./Rasmus/CMTF_test_C.csv", header=FALSE)
D = read.csv("./Rasmus/CMTF_test_D.csv", header=FALSE)
E = read.csv("./Rasmus/CMTF_test_E.csv", header=FALSE)
F = read.csv("./Rasmus/CMTF_test_F.csv", header=FALSE)
G = read.csv("./Rasmus/CMTF_test_G.csv", header=FALSE)
Fac = vect_to_fac(model$par, Z)
cor(A, Fac[[1]])
cor(B, Fac[[2]])
cor(C, Fac[[3]])
cor(D, Fac[[4]])
cor(E, Fac[[5]])
cor(F, Fac[[6]])
cor(G, Fac[[7]])
cmtf_fun(fac_to_vect(init), Z)
model$f
model$fn
model$nf
model$ng
model$iter
model = mize::mize(par=fac_to_vect(init), fg=opt, max_iter=10000, max_fn=100000, abs_tol=1e-10, rel_tol=1e-10, grad_tol=1e-10, method="CG", cg_update="HS", line_search="MT")
Fac = vect_to_fac(model$par, Z)
cor(A, Fac[[1]])
model$f
cmtf_gradient(init, Z)
cmtf_gradient(fac_to_vect(init), Z)
g=cmtf_gradient(fac_to_vect(init), Z)
f
cmtf_fun(fac_to_vect(init),Z)
g
vect_to_fac(g)
vect_to_fac(g, Z)
G=vect_to_fac(g, Z)
G[[1]]
G[[2]]
G[[3]]
G[[4]]
G[[5]]
G[[6]]
G[[7]]
model = cmtf_opt(Z, 2, initialization="nvec", cg_update="PR+")
model$f
model$Fac[[1]]
Fac=model$Fac
cor(A, Fac[[1]])
df = read.csv("./Data/input_deduplicated_RvdP.csv")
df = read.csv("./Data/input_deduplicated_RvdP.csv")
df
df = read.csv("./Data/input_deduplicated_RvdP.csv", sep=" ")
df
df = read.csv("./Data/input_deduplicated_RvdP.csv", sep=" ", header=FALSE) %>% as_tibble()
df
df = read.csv("./Data/input_deduplicated_RvdP.csv", sep=" ", header=FALSE) %>% as_tibble()
metaData = read.csv("./Data/input_deduplicated_metadata_RvdP.csv", sep=" ", header=FALSE) %>% as_tibble()
metaData
df = read.csv("./Data/input_deduplicated_RvdP.csv", sep=" ", header=FALSE) %>% as_tibble()
metaData = read.csv("./Data/input_deduplicated_metadata_RvdP.csv", sep=" ", header=FALSE) %>% as_tibble()
mask = metaData[,6] == "case"
df = df[mask,]
metaData = metaData[mask,]
meta2 = read.csv("./Data/Root_meta_data_parafac.txt") %>% as_tibble()
meta2
meta2 = read.csv("./Data/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble()
meta2
meta2 = meta2[,2:8]
meta2
df
metaData
metaData %>% left_join(meta2)
meta2
metaData
metaData$V1
metaData
colnames(metaData) = c("subject", "visit", "gender", "age", "DMFT", "case.control")
metaData
metaData %>% left_join(meta2)
meta2
metaData %>% left_join(meta2, by="subject")
metaData %>% left_join(meta2, by=c("subject"="SubjectID")
)
metaData %>% left_join(meta2, by=c("subject"="SubjectID")) %>% View
metaData %>% left_join(meta2, by=c("subject"="SubjectID")) %>% select(subject, PainS_NoPainA) %>% unique()
metaData %>% left_join(meta2, by=c("subject"="SubjectID")) %>% select(subject, PainS_NopainA) %>% unique()
metaData %>% left_join(meta2, by=c("subject"="SubjectID"), relationship="many-to-many") %>% select(subject, PainS_NopainA) %>% unique()
min(df)
min(df, na.rm=TRUE)
min(df[df>0], na.rm=TRUE)
pseudocount = min(df[df>0], na.rm=TRUE)
df_log = log(df + pseudocount)
meta2
metaData$visit
library(tidyverse)
library(ggplot2)
library(stringr)
library(parafac4microbiome)
library(CMTFtoolbox)
df = read.csv("./Data/faecesCounts.csv", header=FALSE, sep=" ") %>% as_tibble()
taxonomy = read.csv("./Data/newTaxonomy_faeces.csv", header=FALSE, sep=" ") %>% as_tibble()
sampleInfo = read.csv("./Data/faeces_sampleMeta.csv", header=FALSE, sep=" ") %>% as_tibble()
colnames(sampleInfo) = c("Sample", "RCID", "BMI", "BMI.group", "Days", "Gestational.age", "C.section", "AB.infant", "AB.mother", "Secretor", "Lewis", "subject")
# Make subject metadata
subjectMeta = sampleInfo %>% select(subject, BMI, BMI.group, C.section, Secretor, Lewis) %>% unique() %>% mutate(subject=as.character(subject)) %>% arrange(subject)
# Filter taxa to taxa with at least 1 non-zero value
featureMask = colSums(df) > 0
df = df[,featureMask]
taxonomy = taxonomy[featureMask,]
# Filter based on sparsity
# TODO: filter using group information
threshold = 0.75
sparsity = colSums(df==0) / nrow(df)
featureSelection = sparsity <= threshold
taxonomy_filtered = taxonomy[featureSelection,]
df_filtered = df[,featureSelection]
# CLR
df_clr = t(apply(df_filtered+1, 1, function(x){log(x / compositions::geometricmean(x))})) %>% as_tibble()
# Make into cube
I = length(unique(sampleInfo$subject))
J = ncol(df_clr)
K = length(unique(sampleInfo$Days))
X = array(0L, c(I,J,K))
timepoints = sampleInfo %>% arrange(Days) %>% select(Days) %>% unique() %>% pull()
for(k in 1:K){
Day = timepoints[k]
X[,,k] = cbind(df_clr, sampleInfo) %>% as_tibble() %>% mutate(subject=as.character(subject)) %>% filter(Days == Day) %>% select(c(colnames(df_clr),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
}
# Center and scale
X_cnt = parafac4microbiome::multiwayCenter(X, mode=1)
X_cnt_scl = parafac4microbiome::multiwayScale(X_cnt, mode=2)
faeces_df = X_cnt_scl
faeces_subjectMeta = subjectMeta
faeces_taxonomy = taxonomy_filtered
faeces_timepoints = timepoints
df = read.csv("./Data/milkCounts.csv", header=FALSE, sep=" ") %>% as_tibble()
taxonomy = read.csv("./Data/newTaxonomy_milk.csv", header=FALSE, sep=" ") %>% as_tibble()
sampleInfo = read.csv("./Data/milk_sampleMeta.csv", header=FALSE, sep=" ") %>% as_tibble()
colnames(sampleInfo) = c("Sample", "RCID", "BMI", "BMI.group", "Days", "Gestational.age", "C.section", "AB.infant", "AB.mother", "Secretor", "Lewis", "subject")
# Make subject metadata
subjectMeta = sampleInfo %>% select(subject, BMI, BMI.group, C.section, Secretor, Lewis) %>% unique() %>% mutate(subject=as.character(subject)) %>% arrange(subject)
# Filter taxa to taxa with at least 1 non-zero value
featureMask = colSums(df) > 0
df = df[,featureMask]
taxonomy = taxonomy[featureMask,]
# Filter based on sparsity
# TODO: filter using group information
threshold = 0.85
sparsity = colSums(df==0) / nrow(df)
featureSelection = sparsity <= threshold
taxonomy_filtered = taxonomy[featureSelection,]
df_filtered = df[,featureSelection]
# CLR
df_clr = t(apply(df_filtered+1, 1, function(x){log(x / compositions::geometricmean(x))})) %>% as_tibble()
# Make into cube
I = length(unique(sampleInfo$subject))
J = ncol(df_clr)
K = length(unique(sampleInfo$Days))
X = array(0L, c(I,J,K))
timepoints = sampleInfo %>% arrange(Days) %>% select(Days) %>% unique() %>% pull()
for(k in 1:K){
Day = timepoints[k]
X[,,k] = cbind(df_clr, sampleInfo) %>% as_tibble() %>% mutate(subject=as.character(subject)) %>% filter(Days == Day) %>% select(c(colnames(df_clr),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
}
# Center and scale
X_cnt = parafac4microbiome::multiwayCenter(X, mode=1)
X_cnt_scl = parafac4microbiome::multiwayScale(X_cnt, mode=2)
milk_df = X_cnt_scl
milk_subjectMeta = subjectMeta
milk_taxonomy = taxonomy_filtered
milk_timepoints = timepoints
df = read.csv("./Data/milkMetabNumeric.csv", header=FALSE, sep=" ") %>% as_tibble()
taxonomy = read.csv("./Data/milk_metab_CAS_numbers.csv", header=TRUE, sep=" ") %>% as_tibble()
sampleInfo = read.csv("./Data/milkMetab_sampleMeta.csv", header=FALSE, sep=" ") %>% as_tibble()
colnames(sampleInfo) = c("RCID", "BMI", "BMI.group", "Days", "Gestational.age", "C.section", "AB.infant", "AB.mother", "Secretor", "Lewis", "subject")
# Make subject metadata
subjectMeta = sampleInfo %>% select(subject, BMI, BMI.group, C.section, Secretor, Lewis) %>% unique() %>% mutate(subject=as.character(subject)) %>% arrange(subject)
# Remove duplicates
drop = c(61,81,146)
subjectMeta = subjectMeta %>% mutate(index=1:nrow(.)) %>% filter(!index %in% drop) %>% select(-index) %>% arrange(subject)
# Log transform
df_log = log(df)
# Make into cube
I = length(unique(sampleInfo$subject))
J = ncol(df_log)
K = length(unique(sampleInfo$Days))
X = array(0L, c(I,J,K))
timepoints = sampleInfo %>% arrange(Days) %>% select(Days) %>% unique() %>% pull()
for(k in 1:K){
Day = timepoints[k]
X[,,k] = cbind(df_log, sampleInfo) %>% as_tibble() %>% mutate(subject=as.character(subject)) %>% filter(Days == Day) %>% select(c(colnames(df_log),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
}
# Center and scale
X_cnt = parafac4microbiome::multiwayCenter(X, mode=1)
X_cnt_scl = parafac4microbiome::multiwayScale(X_cnt, mode=2)
milkMetab_df = X_cnt_scl
milkMetab_subjectMeta = subjectMeta
milkMetab_taxonomy = taxonomy
milkMetab_timepoints = timepoints
sharedSubjects = intersect(intersect(faeces_subjectMeta$subject, milk_subjectMeta$subject), milkMetab_subjectMeta$subject)
faeces_homogenized = faeces_df[faeces_subjectMeta$subject %in% sharedSubjects,,]
milk_homogenized = milk_df[milk_subjectMeta$subject %in% sharedSubjects,,]
milkMetab_homogenized = milkMetab_df[milkMetab_subjectMeta$subject %in% sharedSubjects,,]
homogenized_subjectMeta = faeces_subjectMeta %>% filter(subject %in% sharedSubjects) %>% arrange(subject)
datasets = list(faeces_homogenized, milk_homogenized, milkMetab_homogenized)
modes = list(c(1,2,3),c(1,4,5),c(1,6,7))
Z = setupCMTFdata(datasets, modes)
model = cmtf_opt(Z, 2, nstart=1, initialization="nvec")
reinflatedBlocks = reinflateFac(model$Fac, Z)
reinflatedBlocks[[1]]
dim(reinflatedBlocks[[1]])
reinflatedBlocks[[1]][1:10,1:10,1]
reinflatedBlocks[[1]][1:10,1:10,1]*1000
reinflatedBlocks[[1]][1:10,1:10,1]*10000
rTensor::fnorm(reinflatedBlocks[[1]])
rTensor::fnorm(rTensor::as.tensor(reinflatedBlocks[[1]]))
library(CMTFtoolbox)
library(tidyverse)
df = read.csv("./Data/input_deduplicated_RvdP.csv", sep=" ", header=FALSE) %>% as_tibble()
metaData = read.csv("./Data/input_deduplicated_metadata_RvdP.csv", sep=" ", header=FALSE) %>% as_tibble()
mask = metaData[,6] == "case"
df = df[mask,]
metaData = metaData[mask,]
colnames(metaData) = c("subject", "visit", "gender", "age", "DMFT", "case.control")
# Attach pain/no-pain metadata
meta2 = read.csv("./Data/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble()
meta2 = meta2[,2:8]
subjectMeta = metaData %>% left_join(meta2, by=c("subject"="SubjectID"), relationship="many-to-many") %>% select(subject, PainS_NopainA) %>% unique()
pseudocount = min(df[df>0], na.rm=TRUE)
df_log = log(df + pseudocount)
I = length(unique(subjectMeta$subject))
J = ncol(df)
K = max(metaData$visit)
X = array(0L, c(I,J,K))
k=1
cbind(df_log, sampleInfo) %>% as_tibble() %>% filter(visit==k) %>% select(c(colnames(df_log),subject) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
)
cbind(df_log, sampleInfo) %>% as_tibble() %>% filter(visit==k) %>% select(c(colnames(df_log),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
cbind(df_log, metaData) %>% as_tibble() %>% filter(visit==k) %>% select(c(colnames(df_log),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
cbind(df_log, metaData) %>% as_tibble() %>% filter(visit==k) %>% select(c(colnames(df_log),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix() %>% dim
I = length(unique(subjectMeta$subject))
J = ncol(df)
K = max(metaData$visit)
X = array(0L, c(I,J,K))
for(k in 1:K){
X[,,k] = cbind(df_log, metaData) %>% as_tibble() %>% filter(visit==k) %>% select(c(colnames(df_log),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
}
dim(X)
I
X[,,1]
X[,,2]
X[,,3]
X[,,4]
X[,,5]
X[,,6]
I = length(unique(subjectMeta$subject))
J = ncol(df)
K = max(metaData$visit)
X = array(0L, c(I,J,K))
for(k in 1:K){
X[,,k] = cbind(df_log, metaData) %>% as_tibble() %>% filter(visit==k) %>% select(c(colnames(df_log),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
}
# Center and scale
X_cnt = parafac4microbiome::multiwayCenter(X, mode=1)
X_cnt_scl = parafac4microbiome::multiwayScale(X_cnt, mode=2)
cytokines_df = X_cnt_scl
cytokine_subjectMeta = subjectMeta
cytokine_featureMeta = c("VEGF", "CRP", "GM-CSF", "IL1alpha", "IL1beta", "IL4", "IL6", "IL8", "IL10", "IL12p70", "IL17A", "IFNgamma", "MIP1alpha", "OPG", "TNFalpha", "RANKL")
cytokine_timeMeta = 1:K
df = read.csv("./Data/input_deduplicated_RvdP.csv", sep=" ", header=FALSE) %>% as_tibble()
metaData = read.csv("./Data/input_deduplicated_metadata_RvdP.csv", sep=" ", header=FALSE) %>% as_tibble()
mask = metaData[,6] == "case"
df = df[mask,]
metaData = metaData[mask,]
colnames(metaData) = c("subject", "visit", "gender", "age", "DMFT", "case.control")
# Attach pain/no-pain metadata
meta2 = read.csv("./Data/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble()
meta2 = meta2[,2:8]
subjectMeta = metaData %>% left_join(meta2, by=c("subject"="SubjectID"), relationship="many-to-many") %>% select(subject, PainS_NopainA) %>% unique()
# Log transform
pseudocount = min(df[df>0], na.rm=TRUE)
df_log = log(df + pseudocount)
# Reformat into cube
I = length(unique(subjectMeta$subject))
J = ncol(df)
K = max(metaData$visit)
X = array(0L, c(I,J,K))
for(k in 1:K){
X[,,k] = cbind(df_log, metaData) %>% as_tibble() %>% filter(visit==k) %>% select(c(colnames(df_log),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
}
# Center and scale
X_cnt = parafac4microbiome::multiwayCenter(X, mode=1)
X_cnt_scl = parafac4microbiome::multiwayScale(X_cnt, mode=2)
cytokines_df = X_cnt_scl
cytokine_subjectMeta = subjectMeta
cytokine_featureMeta = c("VEGF", "CRP", "GM-CSF", "IL1alpha", "IL1beta", "IL4", "IL6", "IL8", "IL10", "IL12p70", "IL17A", "IFNgamma", "MIP1alpha", "OPG", "TNFalpha", "RANKL")
cytokine_timeMeta = 1:K
df = read.csv("./Data/20240429_microbiome_counts.csv")
dim(df)
df
df = read.csv("./Data/20240429_microbiome_counts.csv", sep=" ")
df
df = read.csv("./Data/20240429_microbiome_counts.csv", sep=" ", header=FALSE)
df
taxonomy = read.csv("./Data/20240429_taxonomy.csv", sep=" ", header=FALSE)
taxonomy
sampleMeta = read.csv("./Data/20240429_microbiome_sampleMeta.csv", sep=" ", header=FALSE)
sampleMeta
df = read.csv("./Data/20240429_microbiome_counts.csv", sep=" ", header=FALSE) %>% as_tibble()
taxonomy = read.csv("./Data/20240429_taxonomy.csv", sep=" ", header=FALSE) %>% as_tibble()
sampleMeta = read.csv("./Data/20240429_microbiome_sampleMeta.csv", sep=" ", header=FALSE) %>% as_tibble()
sampleMeta
mask = !(sampleMeta$V3 %in% c("A11-10 17", "A11-15 25", "A11-8 36"))
sum(mask)
sparsity = colSums(df==0) / nrow(df)
sparsity
# Import
df = read.csv("./Data/20240429_microbiome_counts.csv", sep=" ", header=FALSE) %>% as_tibble()
taxonomy = read.csv("./Data/20240429_taxonomy.csv", sep=" ", header=FALSE) %>% as_tibble()
sampleMeta = read.csv("./Data/20240429_microbiome_sampleMeta.csv", sep=" ", header=FALSE) %>% as_tibble()
# Filter out duplicates
mask = !(sampleMeta$V3 %in% c("A11-10 17", "A11-15 25", "A11-8 36"))
df = df[mask,]
sampleMeta = sampleMeta[mask,]
# Select ASVs based on sparsity
sparsityThreshold = 0.5
sparsity = colSums(df==0) / nrow(df)
featureMask = sparsity >= sparsityThreshold
# CLR
df_clr = t(apply(df+1, 1, function(x){log(x / compositions::geometricmean(x))})) %>% as_tibble()
# Reduce to previously selected ASVs
df_filtered = df_clr[,featureMask]
taxonomy_filtered = taxonomy[featureMask,]
# Center and scale
X_cnt = parafac4microbiome::multiwayCenter(df_filtered, mode=1)
# Center and scale
X_cnt = sweep(df_filtered, colMeans(df_filtered), FUN="-")
# Center and scale
X_cnt = sweep(df_filtered, 2, colMeans(df_filtered), FUN="-")
colMeans(X_cnt)
X_cnt_scl = sweep(df_filtered, 2, apply(df_filtered, 2, function(x){sd(x,na.rm=TRUE)}), FUN="-")
# Import
df = read.csv("./Data/20240429_microbiome_counts.csv", sep=" ", header=FALSE) %>% as_tibble()
taxonomy = read.csv("./Data/20240429_taxonomy.csv", sep=" ", header=FALSE) %>% as_tibble()
sampleMeta = read.csv("./Data/20240429_microbiome_sampleMeta.csv", sep=" ", header=FALSE) %>% as_tibble()
# Filter out duplicates
mask = !(sampleMeta$V3 %in% c("A11-10 17", "A11-15 25", "A11-8 36"))
df = df[mask,]
sampleMeta = sampleMeta[mask,]
# Select ASVs based on sparsity
sparsityThreshold = 0.5
sparsity = colSums(df==0) / nrow(df)
featureMask = sparsity >= sparsityThreshold
# CLR
df_clr = t(apply(df+1, 1, function(x){log(x / compositions::geometricmean(x))})) %>% as_tibble()
# Reduce to previously selected ASVs
df_filtered = df_clr[,featureMask]
taxonomy_filtered = taxonomy[featureMask,]
# Center and scale
X_cnt = sweep(df_filtered, 2, colMeans(df_filtered, na.rm=TRUE), FUN="-")
X_cnt_scl = sweep(df_filtered, 2, apply(df_filtered, 2, function(x){sd(x,na.rm=TRUE)}), FUN="-")
microbiome_df = X_cnt_scl
microbiome_subjectMeta = subjectMeta
microbiome_featureMeta = taxonomy_filtered
cytokine_subjectMeta
microbiome_subjectMeta
all.equal(cytokine_subjectMeta, microbiome_subjectMeta)
all.equal(cytokine_subjectMeta, microbiome_subjectMeta)
homogenized_subjectMeta = cytokine_subjectMeta
datasets = list(cytokines_df, microbiome_df)
modes = list(c(1,2,3),c(1,4))
Z = setupCMTFdata(datasets, modes)
# Import
df = read.csv("./Data/20240429_microbiome_counts.csv", sep=" ", header=FALSE) %>% as_tibble()
taxonomy = read.csv("./Data/20240429_taxonomy.csv", sep=" ", header=FALSE) %>% as_tibble()
sampleMeta = read.csv("./Data/20240429_microbiome_sampleMeta.csv", sep=" ", header=FALSE) %>% as_tibble()
# Filter out duplicates
mask = !(sampleMeta$V3 %in% c("A11-10 17", "A11-15 25", "A11-8 36"))
df = df[mask,]
sampleMeta = sampleMeta[mask,]
# Select ASVs based on sparsity
sparsityThreshold = 0.5
sparsity = colSums(df==0) / nrow(df)
featureMask = sparsity >= sparsityThreshold
# CLR
df_clr = t(apply(df+1, 1, function(x){log(x / compositions::geometricmean(x))})) %>% as_tibble()
# Reduce to previously selected ASVs
df_filtered = df_clr[,featureMask]
taxonomy_filtered = taxonomy[featureMask,]
# Center and scale
X_cnt = sweep(df_filtered, 2, colMeans(df_filtered, na.rm=TRUE), FUN="-")
X_cnt_scl = sweep(df_filtered, 2, apply(df_filtered, 2, function(x){sd(x,na.rm=TRUE)}), FUN="-")
microbiome_df = X_cnt_scl
microbiome_subjectMeta = subjectMeta
microbiome_featureMeta = taxonomy_filtered
cytokines_df
datasets = list(cytokines_df, microbiome_df)
modes = list(c(1,2,3),c(1,4))
Z = setupCMTFdata(datasets, modes)
library(CMTFtoolbox)
library(tidyverse)
# Import
df = read.csv("./Data/input_deduplicated_RvdP.csv", sep=" ", header=FALSE) %>% as_tibble()
metaData = read.csv("./Data/input_deduplicated_metadata_RvdP.csv", sep=" ", header=FALSE) %>% as_tibble()
# Filter on case subjects
mask = metaData[,6] == "case"
df = df[mask,]
metaData = metaData[mask,]
colnames(metaData) = c("subject", "visit", "gender", "age", "DMFT", "case.control")
# Attach pain/no-pain metadata
meta2 = read.csv("./Data/Root_meta_data_parafac.txt", sep="\t") %>% as_tibble()
meta2 = meta2[,2:8]
subjectMeta = metaData %>% left_join(meta2, by=c("subject"="SubjectID"), relationship="many-to-many") %>% select(subject, PainS_NopainA) %>% unique()
# Log transform
pseudocount = min(df[df>0], na.rm=TRUE)
df_log = log(df + pseudocount)
# Reformat into cube
I = length(unique(subjectMeta$subject))
J = ncol(df)
K = max(metaData$visit)
X = array(0L, c(I,J,K))
for(k in 1:K){
X[,,k] = cbind(df_log, metaData) %>% as_tibble() %>% filter(visit==k) %>% select(c(colnames(df_log),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
}
# Center and scale
X_cnt = parafac4microbiome::multiwayCenter(X, mode=1)
X_cnt_scl = parafac4microbiome::multiwayScale(X_cnt, mode=2)
cytokines_df = X_cnt_scl
cytokine_subjectMeta = subjectMeta
cytokine_featureMeta = c("VEGF", "CRP", "GM-CSF", "IL1alpha", "IL1beta", "IL4", "IL6", "IL8", "IL10", "IL12p70", "IL17A", "IFNgamma", "MIP1alpha", "OPG", "TNFalpha", "RANKL")
cytokine_timeMeta = 1:K
# Import
df = read.csv("./Data/20240429_microbiome_counts.csv", sep=" ", header=FALSE) %>% as_tibble()
taxonomy = read.csv("./Data/20240429_taxonomy.csv", sep=" ", header=FALSE) %>% as_tibble()
sampleMeta = read.csv("./Data/20240429_microbiome_sampleMeta.csv", sep=" ", header=FALSE) %>% as_tibble()
# Filter out duplicates
mask = !(sampleMeta$V3 %in% c("A11-10 17", "A11-15 25", "A11-8 36"))
df = df[mask,]
sampleMeta = sampleMeta[mask,]
# Select ASVs based on sparsity
sparsityThreshold = 0.5
sparsity = colSums(df==0) / nrow(df)
featureMask = sparsity >= sparsityThreshold
# CLR
df_clr = t(apply(df+1, 1, function(x){log(x / compositions::geometricmean(x))})) %>% as_tibble()
# Reduce to previously selected ASVs
df_filtered = df_clr[,featureMask]
taxonomy_filtered = taxonomy[featureMask,]
# Center and scale
X_cnt = sweep(df_filtered, 2, colMeans(df_filtered, na.rm=TRUE), FUN="-")
X_cnt_scl = sweep(df_filtered, 2, apply(df_filtered, 2, function(x){sd(x,na.rm=TRUE)}), FUN="-")
microbiome_df = X_cnt_scl
microbiome_subjectMeta = subjectMeta
microbiome_featureMeta = taxonomy_filtered
all.equal(cytokine_subjectMeta, microbiome_subjectMeta)
homogenized_subjectMeta = cytokine_subjectMeta
datasets = list(cytokines_df, microbiome_df)
modes = list(c(1,2,3),c(1,4))
Z = setupCMTFdata(datasets, modes)
microbiome_df = as.matrix(X_cnt_scl)
datasets = list(cytokines_df, microbiome_df)
modes = list(c(1,2,3),c(1,4))
Z = setupCMTFdata(datasets, modes)
Z
datasets[[1]][1:10,1:10,1]
datasets[[2]][1:10,1:10,1]
datasets[[2]][1:10,1:10]
