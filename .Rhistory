U = svd(r)$u # creates orthogonal score vectors with norm 1 mean 0
a_global = U[,1]
a_local = U[,2]
a_distinct1 = U[,3]
a_distinct2 = U[,4]
a_distinct3 = U[,5]
b_global1 = array(0L, c(numFeatures, 1))
b_global1[1:4] = 1
b_global1 = b_global1 - mean(b_global1)
b_global1 = b_global1 / norm(b_global1, "2")
b_global2 = array(0L, c(numFeatures, 1))
b_global2[5:8] = 1
b_global2 = b_global2 - mean(b_global2)
b_global2 = b_global2 / norm(b_global2, "2")
b_global3 = array(0L, c(numFeatures, 1))
b_global3[9:12] = 1
b_global3 = b_global3 - mean(b_global3)
b_global3 = b_global3 / norm(b_global3, "2")
b_local1 = array(0L, c(numFeatures, 1))
b_local1[21:26] = 1
b_local1 = b_local1 - mean(b_local1)
b_local1 = b_local1 / norm(b_local1, "2")
b_local2 = array(0L, c(numFeatures, 1))
b_local2[27:32] = 1
b_local2 = b_local2 - mean(b_local2)
b_local2 = b_local2 / norm(b_local2, "2")
# Block 3 does not load onto the local component, as simplification
b_distinct1 = array(0L, c(numFeatures, 1))
b_distinct1[41:52] = 1
b_distinct1 = b_distinct1 - mean(b_distinct1)
b_distinct1 = b_distinct1 / norm(b_distinct1, "2")
b_distinct2 = array(0L, c(numFeatures, 1))
b_distinct2[60:72] = 1
b_distinct2 = b_distinct2 - mean(b_distinct2)
b_distinct2 = b_distinct2 / norm(b_distinct2, "2")
b_distinct3 = array(0L, c(numFeatures, 1))
b_distinct3[80:92] = 1
b_distinct3 = b_distinct3 - mean(b_distinct3)
b_distinct3 = b_distinct3 / norm(b_distinct3, "2")
c_global1 = t(exp(1:numTimepoints))
c_global1 = c_global1 - mean(c_global1)
c_global1 = c_global1 / norm(c_global1, "2")
c_global1 = t(c_global1)
c_global2 = t(sin(1:numTimepoints))
c_global2 = c_global2 - mean(c_global2)
c_global2 = c_global2 / norm(c_global2, "2")
c_global2 = t(c_global2)
c_global3 = t(cos(1:numTimepoints))
c_global3 = c_global3 - mean(c_global3)
c_global3 = c_global3 / norm(c_global3, "2")
c_global3 = t(c_global3)
c_local1 = t(sqrt(1:numTimepoints))
c_local1 = c_local1 - mean(c_local1)
c_local1 = c_local1 / norm(c_local1, "2")
c_local1 = t(c_local1)
c_local2 = t((1:numTimepoints)^2)
c_local2 = c_local2 - mean(c_local2)
c_local2 = c_local2 / norm(c_local2, "2")
c_local2 = t(c_local2)
c_distinct1 = t(1:numTimepoints)
c_distinct1 = c_distinct1 - mean(c_distinct1)
c_distinct1 = c_distinct1 / norm(c_distinct1, "2")
c_distinct1 = t(c_distinct1)
c_distinct2 = t(1/(1:numTimepoints))
c_distinct2 = c_distinct2 - mean(c_distinct2)
c_distinct2 = c_distinct2 / norm(c_distinct2, "2")
c_distinct2 = t(c_distinct2)
c_distinct3 = t(log(1:numTimepoints))
c_distinct3 = c_distinct3 - mean(c_distinct3)
c_distinct3 = c_distinct3 / norm(c_distinct3, "2")
c_distinct3 = t(c_distinct3)
# Subject loadings
a = a_global %>% as_tibble() %>% mutate(index = 1:numSubjects) %>% ggplot(aes(x=index,y=value)) + geom_line() + ggtitle("a_global") + xlab("") + ylab("")
b = a_local %>% as_tibble() %>% mutate(index = 1:numSubjects) %>% ggplot(aes(x=index,y=value)) + geom_line() + ggtitle("a_local") + xlab("") + ylab("")
c = a_distinct1 %>% as_tibble() %>% mutate(index = 1:numSubjects) %>% ggplot(aes(x=index,y=value)) + geom_line() + ggtitle("a_distinct1") + xlab("") + ylab("")
d = a_distinct2 %>% as_tibble() %>% mutate(index = 1:numSubjects) %>% ggplot(aes(x=index,y=value)) + geom_line() + ggtitle("a_distinct2") + xlab("") + ylab("")
e = a_distinct3 %>% as_tibble() %>% mutate(index = 1:numSubjects) %>% ggplot(aes(x=index,y=value)) + geom_line() + ggtitle("a_distinct3") + xlab("") + ylab("")
ggarrange(a,b,c,d,e, nrow=1)
# Feature loadings
f = b_global1 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_global1") + xlab("") + ylab("")
g = b_global2 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_global2") + xlab("") + ylab("")
h = b_global3 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_global3") + xlab("") + ylab("")
i = b_local1 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_local1") + xlab("") + ylab("")
j = b_local2 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_local2") + xlab("") + ylab("")
k = b_distinct1 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_distinct1") + xlab("") + ylab("")
l = b_distinct2 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_distinct2") + xlab("") + ylab("")
m = b_distinct3 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_distinct3") + xlab("") + ylab("")
ggarrange(f,g,h,i,j,k,l,m, nrow=2, ncol=4)
# Time loadings
n = c_global1 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_global1") + xlab("") + ylab("")
o = c_global2 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_global2") + xlab("") + ylab("")
p = c_global3 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_global3") + xlab("") + ylab("")
q = c_local1 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_local1") + xlab("") + ylab("")
r = c_local2 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_local2") + xlab("") + ylab("")
s = c_distinct1 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_distinct1") + xlab("") + ylab("")
t = c_distinct2 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_distinct2") + xlab("") + ylab("")
u = c_distinct3 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_distinct3") + xlab("") + ylab("")
ggarrange(n,o,p,q,r,s,t,u, nrow=2, ncol=4)
# Block X1
X1_term1 = parafac4microbiome::reinflateTensor(a_global, b_global1, c_global1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term2 = parafac4microbiome::reinflateTensor(a_local, b_local1, c_local1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term3 = parafac4microbiome::reinflateTensor(a_distinct1, b_distinct1, c_distinct1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_raw = w_global * X1_term1 + w_local * X1_term2 + w_distinct1 * X1_term3
# Block X2
X2_term1 = parafac4microbiome::reinflateTensor(a_global, b_global2, c_global2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term2 = parafac4microbiome::reinflateTensor(a_local, b_local2, c_local2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term3 = parafac4microbiome::reinflateTensor(a_distinct2, b_distinct2, c_distinct2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_raw = w_global * X2_term1 + w_local * X2_term2 + w_distinct2 * X2_term3
# Block X3
X3_term1 = parafac4microbiome::reinflateTensor(a_global, b_global3, c_global3, returnAsTensor=TRUE) # rTensor::fnorm is 1
# there is no local component
X3_term3 = parafac4microbiome::reinflateTensor(a_distinct3, b_distinct3, c_distinct3, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_raw = w_global * X2_term1 + w_distinct3 * X2_term3
# Create noise
noise1 = as.tensor(array(rnorm(numSubjects*numFeatures*numTimepoints), c(numSubjects, numFeatures, numTimepoints)))
noise2 = as.tensor(array(rnorm(numSubjects*numFeatures*numTimepoints), c(numSubjects, numFeatures, numTimepoints)))
noise3 = as.tensor(array(rnorm(numSubjects*numFeatures*numTimepoints), c(numSubjects, numFeatures, numTimepoints)))
# Center the noise
noise1 = parafac4microbiome::multiwayCenter(noise1)
noise2 = parafac4microbiome::multiwayCenter(noise2)
noise3 = parafac4microbiome::multiwayCenter(noise3)
# Scale the noise
noise1 = parafac4microbiome::multiwayScale(noise1)
noise2 = parafac4microbiome::multiwayScale(noise2)
noise3 = parafac4microbiome::multiwayScale(noise3)
# Put back into Tensor
noise1 = as.tensor(noise1)
noise2 = as.tensor(noise2)
noise3 = as.tensor(noise3)
# Make the noise the right frobenius norm
noise1 = fnorm(X1_raw) / (1/noiseOnX) * (noise1 / fnorm(noise1))
noise2 = fnorm(X2_raw) / (1/noiseOnX) * (noise2 / fnorm(noise2))
noise3 = fnorm(X3_raw) / (1/noiseOnX) * (noise3 / fnorm(noise3))
library(rTensor)
library(CMTFtoolbox)
library(tidyverse)
library(ggplot2)
library(ggpubr)
set.seed(123)
# Sizes of the blocks
numSubjects = 108
numFeatures = 100
numTimepoints = 10
# Settings
Ysize = 1
betaValue = 1e-3
noiseOnX = 0.25 # Noise percentage on each X block
noiseOnY = 0.05 # Noise percentage on Y
w_global = 99
w_local = 1
w_distinct1 = 5
w_distinct2 = 5
w_distinct3 = 5
r = array(rnorm(numSubjects*5), c(numSubjects, 5))
r = sweep(r, 2, colMeans(r), FUN="-")
U = svd(r)$u # creates orthogonal score vectors with norm 1 mean 0
a_global = U[,1]
a_local = U[,2]
a_distinct1 = U[,3]
a_distinct2 = U[,4]
a_distinct3 = U[,5]
b_global1 = array(0L, c(numFeatures, 1))
b_global1[1:4] = 1
b_global1 = b_global1 - mean(b_global1)
b_global1 = b_global1 / norm(b_global1, "2")
b_global2 = array(0L, c(numFeatures, 1))
b_global2[5:8] = 1
b_global2 = b_global2 - mean(b_global2)
b_global2 = b_global2 / norm(b_global2, "2")
b_global3 = array(0L, c(numFeatures, 1))
b_global3[9:12] = 1
b_global3 = b_global3 - mean(b_global3)
b_global3 = b_global3 / norm(b_global3, "2")
b_local1 = array(0L, c(numFeatures, 1))
b_local1[21:26] = 1
b_local1 = b_local1 - mean(b_local1)
b_local1 = b_local1 / norm(b_local1, "2")
b_local2 = array(0L, c(numFeatures, 1))
b_local2[27:32] = 1
b_local2 = b_local2 - mean(b_local2)
b_local2 = b_local2 / norm(b_local2, "2")
# Block 3 does not load onto the local component, as simplification
b_distinct1 = array(0L, c(numFeatures, 1))
b_distinct1[41:52] = 1
b_distinct1 = b_distinct1 - mean(b_distinct1)
b_distinct1 = b_distinct1 / norm(b_distinct1, "2")
b_distinct2 = array(0L, c(numFeatures, 1))
b_distinct2[60:72] = 1
b_distinct2 = b_distinct2 - mean(b_distinct2)
b_distinct2 = b_distinct2 / norm(b_distinct2, "2")
b_distinct3 = array(0L, c(numFeatures, 1))
b_distinct3[80:92] = 1
b_distinct3 = b_distinct3 - mean(b_distinct3)
b_distinct3 = b_distinct3 / norm(b_distinct3, "2")
c_global1 = t(exp(1:numTimepoints))
c_global1 = c_global1 - mean(c_global1)
c_global1 = c_global1 / norm(c_global1, "2")
c_global1 = t(c_global1)
c_global2 = t(sin(1:numTimepoints))
c_global2 = c_global2 - mean(c_global2)
c_global2 = c_global2 / norm(c_global2, "2")
c_global2 = t(c_global2)
c_global3 = t(cos(1:numTimepoints))
c_global3 = c_global3 - mean(c_global3)
c_global3 = c_global3 / norm(c_global3, "2")
c_global3 = t(c_global3)
c_local1 = t(sqrt(1:numTimepoints))
c_local1 = c_local1 - mean(c_local1)
c_local1 = c_local1 / norm(c_local1, "2")
c_local1 = t(c_local1)
c_local2 = t((1:numTimepoints)^2)
c_local2 = c_local2 - mean(c_local2)
c_local2 = c_local2 / norm(c_local2, "2")
c_local2 = t(c_local2)
c_distinct1 = t(1:numTimepoints)
c_distinct1 = c_distinct1 - mean(c_distinct1)
c_distinct1 = c_distinct1 / norm(c_distinct1, "2")
c_distinct1 = t(c_distinct1)
c_distinct2 = t(1/(1:numTimepoints))
c_distinct2 = c_distinct2 - mean(c_distinct2)
c_distinct2 = c_distinct2 / norm(c_distinct2, "2")
c_distinct2 = t(c_distinct2)
c_distinct3 = t(log(1:numTimepoints))
c_distinct3 = c_distinct3 - mean(c_distinct3)
c_distinct3 = c_distinct3 / norm(c_distinct3, "2")
c_distinct3 = t(c_distinct3)
# Subject loadings
a = a_global %>% as_tibble() %>% mutate(index = 1:numSubjects) %>% ggplot(aes(x=index,y=value)) + geom_line() + ggtitle("a_global") + xlab("") + ylab("")
b = a_local %>% as_tibble() %>% mutate(index = 1:numSubjects) %>% ggplot(aes(x=index,y=value)) + geom_line() + ggtitle("a_local") + xlab("") + ylab("")
c = a_distinct1 %>% as_tibble() %>% mutate(index = 1:numSubjects) %>% ggplot(aes(x=index,y=value)) + geom_line() + ggtitle("a_distinct1") + xlab("") + ylab("")
d = a_distinct2 %>% as_tibble() %>% mutate(index = 1:numSubjects) %>% ggplot(aes(x=index,y=value)) + geom_line() + ggtitle("a_distinct2") + xlab("") + ylab("")
e = a_distinct3 %>% as_tibble() %>% mutate(index = 1:numSubjects) %>% ggplot(aes(x=index,y=value)) + geom_line() + ggtitle("a_distinct3") + xlab("") + ylab("")
ggarrange(a,b,c,d,e, nrow=1)
# Feature loadings
f = b_global1 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_global1") + xlab("") + ylab("")
g = b_global2 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_global2") + xlab("") + ylab("")
h = b_global3 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_global3") + xlab("") + ylab("")
i = b_local1 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_local1") + xlab("") + ylab("")
j = b_local2 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_local2") + xlab("") + ylab("")
k = b_distinct1 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_distinct1") + xlab("") + ylab("")
l = b_distinct2 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_distinct2") + xlab("") + ylab("")
m = b_distinct3 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_distinct3") + xlab("") + ylab("")
ggarrange(f,g,h,i,j,k,l,m, nrow=2, ncol=4)
# Time loadings
n = c_global1 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_global1") + xlab("") + ylab("")
o = c_global2 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_global2") + xlab("") + ylab("")
p = c_global3 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_global3") + xlab("") + ylab("")
q = c_local1 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_local1") + xlab("") + ylab("")
r = c_local2 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_local2") + xlab("") + ylab("")
s = c_distinct1 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_distinct1") + xlab("") + ylab("")
t = c_distinct2 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_distinct2") + xlab("") + ylab("")
u = c_distinct3 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_distinct3") + xlab("") + ylab("")
ggarrange(n,o,p,q,r,s,t,u, nrow=2, ncol=4)
# Block X1
X1_term1 = parafac4microbiome::reinflateTensor(a_global, b_global1, c_global1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term2 = parafac4microbiome::reinflateTensor(a_local, b_local1, c_local1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term3 = parafac4microbiome::reinflateTensor(a_distinct1, b_distinct1, c_distinct1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_raw = w_global * X1_term1 + w_local * X1_term2 + w_distinct1 * X1_term3
# Block X2
X2_term1 = parafac4microbiome::reinflateTensor(a_global, b_global2, c_global2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term2 = parafac4microbiome::reinflateTensor(a_local, b_local2, c_local2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term3 = parafac4microbiome::reinflateTensor(a_distinct2, b_distinct2, c_distinct2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_raw = w_global * X2_term1 + w_local * X2_term2 + w_distinct2 * X2_term3
# Block X3
X3_term1 = parafac4microbiome::reinflateTensor(a_global, b_global3, c_global3, returnAsTensor=TRUE) # rTensor::fnorm is 1
# there is no local component
X3_term3 = parafac4microbiome::reinflateTensor(a_distinct3, b_distinct3, c_distinct3, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_raw = w_global * X2_term1 + w_distinct3 * X2_term3
# Put in Tensor form
X1_raw = as.tensor(X1_raw)
library(rTensor)
library(CMTFtoolbox)
library(tidyverse)
library(ggplot2)
library(ggpubr)
set.seed(123)
# Sizes of the blocks
numSubjects = 108
numFeatures = 100
numTimepoints = 10
# Settings
Ysize = 1
betaValue = 1e-3
noiseOnX = 0.25 # Noise percentage on each X block
noiseOnY = 0.05 # Noise percentage on Y
w_global = 99
w_local = 1
w_distinct1 = 5
w_distinct2 = 5
w_distinct3 = 5
r = array(rnorm(numSubjects*5), c(numSubjects, 5))
r = sweep(r, 2, colMeans(r), FUN="-")
U = svd(r)$u # creates orthogonal score vectors with norm 1 mean 0
a_global = U[,1]
a_local = U[,2]
a_distinct1 = U[,3]
a_distinct2 = U[,4]
a_distinct3 = U[,5]
b_global1 = array(0L, c(numFeatures, 1))
b_global1[1:4] = 1
b_global1 = b_global1 - mean(b_global1)
b_global1 = b_global1 / norm(b_global1, "2")
b_global2 = array(0L, c(numFeatures, 1))
b_global2[5:8] = 1
b_global2 = b_global2 - mean(b_global2)
b_global2 = b_global2 / norm(b_global2, "2")
b_global3 = array(0L, c(numFeatures, 1))
b_global3[9:12] = 1
b_global3 = b_global3 - mean(b_global3)
b_global3 = b_global3 / norm(b_global3, "2")
b_local1 = array(0L, c(numFeatures, 1))
b_local1[21:26] = 1
b_local1 = b_local1 - mean(b_local1)
b_local1 = b_local1 / norm(b_local1, "2")
b_local2 = array(0L, c(numFeatures, 1))
b_local2[27:32] = 1
b_local2 = b_local2 - mean(b_local2)
b_local2 = b_local2 / norm(b_local2, "2")
# Block 3 does not load onto the local component, as simplification
b_distinct1 = array(0L, c(numFeatures, 1))
b_distinct1[41:52] = 1
b_distinct1 = b_distinct1 - mean(b_distinct1)
b_distinct1 = b_distinct1 / norm(b_distinct1, "2")
b_distinct2 = array(0L, c(numFeatures, 1))
b_distinct2[60:72] = 1
b_distinct2 = b_distinct2 - mean(b_distinct2)
b_distinct2 = b_distinct2 / norm(b_distinct2, "2")
b_distinct3 = array(0L, c(numFeatures, 1))
b_distinct3[80:92] = 1
b_distinct3 = b_distinct3 - mean(b_distinct3)
b_distinct3 = b_distinct3 / norm(b_distinct3, "2")
c_global1 = t(exp(1:numTimepoints))
c_global1 = c_global1 - mean(c_global1)
c_global1 = c_global1 / norm(c_global1, "2")
c_global1 = t(c_global1)
c_global2 = t(sin(1:numTimepoints))
c_global2 = c_global2 - mean(c_global2)
c_global2 = c_global2 / norm(c_global2, "2")
c_global2 = t(c_global2)
c_global3 = t(cos(1:numTimepoints))
c_global3 = c_global3 - mean(c_global3)
c_global3 = c_global3 / norm(c_global3, "2")
c_global3 = t(c_global3)
c_local1 = t(sqrt(1:numTimepoints))
c_local1 = c_local1 - mean(c_local1)
c_local1 = c_local1 / norm(c_local1, "2")
c_local1 = t(c_local1)
c_local2 = t((1:numTimepoints)^2)
c_local2 = c_local2 - mean(c_local2)
c_local2 = c_local2 / norm(c_local2, "2")
c_local2 = t(c_local2)
c_distinct1 = t(1:numTimepoints)
c_distinct1 = c_distinct1 - mean(c_distinct1)
c_distinct1 = c_distinct1 / norm(c_distinct1, "2")
c_distinct1 = t(c_distinct1)
c_distinct2 = t(1/(1:numTimepoints))
c_distinct2 = c_distinct2 - mean(c_distinct2)
c_distinct2 = c_distinct2 / norm(c_distinct2, "2")
c_distinct2 = t(c_distinct2)
c_distinct3 = t(log(1:numTimepoints))
c_distinct3 = c_distinct3 - mean(c_distinct3)
c_distinct3 = c_distinct3 / norm(c_distinct3, "2")
c_distinct3 = t(c_distinct3)
# Subject loadings
a = a_global %>% as_tibble() %>% mutate(index = 1:numSubjects) %>% ggplot(aes(x=index,y=value)) + geom_line() + ggtitle("a_global") + xlab("") + ylab("")
b = a_local %>% as_tibble() %>% mutate(index = 1:numSubjects) %>% ggplot(aes(x=index,y=value)) + geom_line() + ggtitle("a_local") + xlab("") + ylab("")
c = a_distinct1 %>% as_tibble() %>% mutate(index = 1:numSubjects) %>% ggplot(aes(x=index,y=value)) + geom_line() + ggtitle("a_distinct1") + xlab("") + ylab("")
d = a_distinct2 %>% as_tibble() %>% mutate(index = 1:numSubjects) %>% ggplot(aes(x=index,y=value)) + geom_line() + ggtitle("a_distinct2") + xlab("") + ylab("")
e = a_distinct3 %>% as_tibble() %>% mutate(index = 1:numSubjects) %>% ggplot(aes(x=index,y=value)) + geom_line() + ggtitle("a_distinct3") + xlab("") + ylab("")
ggarrange(a,b,c,d,e, nrow=1)
# Feature loadings
f = b_global1 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_global1") + xlab("") + ylab("")
g = b_global2 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_global2") + xlab("") + ylab("")
h = b_global3 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_global3") + xlab("") + ylab("")
i = b_local1 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_local1") + xlab("") + ylab("")
j = b_local2 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_local2") + xlab("") + ylab("")
k = b_distinct1 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_distinct1") + xlab("") + ylab("")
l = b_distinct2 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_distinct2") + xlab("") + ylab("")
m = b_distinct3 %>% as_tibble() %>% mutate(index = 1:numFeatures) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("b_distinct3") + xlab("") + ylab("")
ggarrange(f,g,h,i,j,k,l,m, nrow=2, ncol=4)
# Time loadings
n = c_global1 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_global1") + xlab("") + ylab("")
o = c_global2 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_global2") + xlab("") + ylab("")
p = c_global3 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_global3") + xlab("") + ylab("")
q = c_local1 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_local1") + xlab("") + ylab("")
r = c_local2 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_local2") + xlab("") + ylab("")
s = c_distinct1 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_distinct1") + xlab("") + ylab("")
t = c_distinct2 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_distinct2") + xlab("") + ylab("")
u = c_distinct3 %>% as_tibble() %>% mutate(index = 1:numTimepoints) %>% ggplot(aes(x=index,y=V1)) + geom_line() + ggtitle("c_distinct3") + xlab("") + ylab("")
ggarrange(n,o,p,q,r,s,t,u, nrow=2, ncol=4)
# Block X1
X1_term1 = parafac4microbiome::reinflateTensor(a_global, b_global1, c_global1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term2 = parafac4microbiome::reinflateTensor(a_local, b_local1, c_local1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term3 = parafac4microbiome::reinflateTensor(a_distinct1, b_distinct1, c_distinct1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_raw = w_global * X1_term1 + w_local * X1_term2 + w_distinct1 * X1_term3
dim(X1_Raw)
dim(X1_raw)
as.tensor(X1_raw)
class(X1_raw)
# Block X1
X1_term1 = parafac4microbiome::reinflateTensor(a_global, b_global1, c_global1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term2 = parafac4microbiome::reinflateTensor(a_local, b_local1, c_local1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term3 = parafac4microbiome::reinflateTensor(a_distinct1, b_distinct1, c_distinct1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_raw = w_global * X1_term1 + w_local * X1_term2 + w_distinct1 * X1_term3
# Block X2
X2_term1 = parafac4microbiome::reinflateTensor(a_global, b_global2, c_global2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term2 = parafac4microbiome::reinflateTensor(a_local, b_local2, c_local2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term3 = parafac4microbiome::reinflateTensor(a_distinct2, b_distinct2, c_distinct2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_raw = w_global * X2_term1 + w_local * X2_term2 + w_distinct2 * X2_term3
# Block X3
X3_term1 = parafac4microbiome::reinflateTensor(a_global, b_global3, c_global3, returnAsTensor=TRUE) # rTensor::fnorm is 1
# there is no local component
X3_term3 = parafac4microbiome::reinflateTensor(a_distinct3, b_distinct3, c_distinct3, returnAsTensor=TRUE) # rTensor::fnorm is 1
X3_raw = w_global * X3_term1 + w_distinct3 * X3_term3
# Create noise
noise1 = as.tensor(array(rnorm(numSubjects*numFeatures*numTimepoints), c(numSubjects, numFeatures, numTimepoints)))
noise2 = as.tensor(array(rnorm(numSubjects*numFeatures*numTimepoints), c(numSubjects, numFeatures, numTimepoints)))
noise3 = as.tensor(array(rnorm(numSubjects*numFeatures*numTimepoints), c(numSubjects, numFeatures, numTimepoints)))
# Center the noise
noise1 = parafac4microbiome::multiwayCenter(noise1)
noise2 = parafac4microbiome::multiwayCenter(noise2)
noise3 = parafac4microbiome::multiwayCenter(noise3)
# Scale the noise
noise1 = parafac4microbiome::multiwayScale(noise1)
noise2 = parafac4microbiome::multiwayScale(noise2)
noise3 = parafac4microbiome::multiwayScale(noise3)
# Put back into Tensor
noise1 = as.tensor(noise1)
noise2 = as.tensor(noise2)
noise3 = as.tensor(noise3)
# Make the noise the right frobenius norm
noise1 = fnorm(X1_raw) / (1/noiseOnX) * (noise1 / fnorm(noise1))
noise2 = fnorm(X2_raw) / (1/noiseOnX) * (noise2 / fnorm(noise2))
noise3 = fnorm(X3_raw) / (1/noiseOnX) * (noise3 / fnorm(noise3))
# Add noise to X blocks
X1_noise = X1_raw + noise1
X2_noise = X2_raw + noise2
X3_noise = X3_raw + noise3
# Center
X1_cnt = parafac4microbiome::multiwayCenter(X1_noise)
X2_cnt = parafac4microbiome::multiwayCenter(X2_noise)
X3_cnt = parafac4microbiome::multiwayCenter(X3_noise)
# Scale
X1_cnt_scl = parafac4microbiome::multiwayScale(X1_cnt)
X2_cnt_scl = parafac4microbiome::multiwayScale(X2_cnt)
X3_cnt_scl = parafac4microbiome::multiwayScale(X3_cnt)
# Define final version of X
X1_final = X1_cnt_scl
X2_final = X2_cnt_scl
X3_final = X3_cnt_scl
Y = a_local
noiseY = rnorm(numSubjects)
noiseY = noiseY - mean(noiseY)
noiseY = (norm(Y, "2") / (1/noiseOnY)) * (noiseY / norm(noiseY, "2"))
Ynoise = Y + noiseY
Ynorm = Y / norm(Y, "2")
Y_final = Ysize * Ynorm
# Quick sanity check of Y vs a_local
cbind(a_local, Y_final) %>% as_tibble() %>% mutate(index=1:numSubjects) %>% pivot_longer(-index) %>% ggplot(aes(x=index,y=value,col=as.factor(name))) + geom_line()
datasets = list(X1_final, X2_final, X3_final)
modes = list(c(1,2,3), c(1,4,5), c(1,6,7))
Z = CMTFtoolbox::setupCMTFdata(datasets, modes, normalize=TRUE)
Y = a_local
noiseY = rnorm(numSubjects)
noiseY = noiseY - mean(noiseY)
noiseY = (norm(Y, "2") / (1/noiseOnY)) * (noiseY / norm(noiseY, "2"))
Ynoise = Y + noiseY
Ynorm = Y / norm(Y, "2")
Y_final = Ysize * Ynorm
# Quick sanity check of Y vs a_local
cbind(a_local, Y_final) %>% as_tibble() %>% ggplot(aes(x=a_local,y=Y_final)) + geom_point()
datasets = list(X1_final, X2_final, X3_final)
modes = list(c(1,2,3), c(1,4,5), c(1,6,7))
Z = CMTFtoolbox::setupCMTFdata(datasets, modes, normalize=TRUE)
Z
model_ACMTF = acmtf_opt(Z, numComponents=5, nstart=100, numCores=6)
model_ACMTF = acmtf_opt(Z, numComponents=5, nstart=10)
model_ACMTF = acmtf_opt(Z, numComponents=5)
model_ACMTF
model_ACMTF$Fac
model_ACMTF$Fac[[1]]
cor(model_ACMTF$Fac[[1]], a_global)
scores = cbind(a_global, a_local, a_distinct1, a_distinct2, a_distinct3)
cor(model_ACMTF$Fac[[1]], scores)
cbind(model_ACMTF$Fac[[1]][,1], a_global) %>% as_tibble()
cbind(model_ACMTF$Fac[[1]][,1], a_global) %>% as_tibble() %>% ggplot(aes(x=a_global,y=V1)) + geom_point()
cbind(model_ACMTF$Fac[[1]][,1], a_global) %>% as_tibble() %>% ggplot(aes(x=a_global,y=V1)) + geom_point() + ggtitle("Common") + xlab("Real scores") + ylab("ACMTF")
cor(model_ACMTF$Fac[[1]], scores)
scores = cbind(a_global, a_local, a_distinct1, a_distinct2, a_distinct3)
cor(model_ACMTF$Fac[[1]], scores)
a = cbind(model_ACMTF$Fac[[1]][,1], a_global) %>% as_tibble() %>% ggplot(aes(x=a_global,y=V1)) + geom_point() + ggtitle("Common") + xlab("Real scores") + ylab("ACMTF")
b = cbind(model_ACMTF$Fac[[1]][,5], a_local) %>% as_tibble() %>% ggplot(aes(x=a_local,y=V1)) + geom_point() + ggtitle("Local") + xlab("Real scores") + ylab("ACMTF")
c = cbind(model_ACMTF$Fac[[1]][,2], a_distinct1) %>% as_tibble() %>% ggplot(aes(x=a_distinct1,y=V1)) + geom_point() + ggtitle("Distinct X1") + xlab("Real scores") + ylab("ACMTF")
d = cbind(model_ACMTF$Fac[[1]][,3], a_distinct2) %>% as_tibble() %>% ggplot(aes(x=a_distinct2,y=V1)) + geom_point() + ggtitle("Distinct X2") + xlab("Real scores") + ylab("ACMTF")
e = cbind(model_ACMTF$Fac[[1]][,4], a_distinct3) %>% as_tibble() %>% ggplot(aes(x=a_distinct3,y=V1)) + geom_point() + ggtitle("Distinct X3") + xlab("Real scores") + ylab("ACMTF")
ggarrange(a,b,c,d,e,nrow=1)
ggarrange(a,b,c,d,e,nrow=1)
model_ACMTF$iter
model_ACMTF$terminate
model_ACMTF$Fac
datasets_YAS = list(X1_final, X2_final, X3_final, Y_final)
modes_YAS = list(c(1,2,3), c(1,4,5), c(1,6,7), c(1,8))
Z_YAS = CMTFtoolbox::setupCMTFdata(datasets_YAS, modes_YAS, normalize=TRUE)
CMTFToolbox::setupCMTFdata
CMTFtoolbox::setupCMTFdata
Y_final
as.tensor(Y_final)
# Convert to Tensor
Y_final = as.tensor(Y_final)
datasets_YAS = list(X1_final, X2_final, X3_final, Y_final)
modes_YAS = list(c(1,2,3), c(1,4,5), c(1,6,7), c(1,8))
Z_YAS = CMTFtoolbox::setupCMTFdata(datasets_YAS, modes_YAS, normalize=TRUE)
