timepoints = sampleInfo %>% arrange(Days) %>% select(Days) %>% unique() %>% pull()
for(k in 1:K){
Day = timepoints[k]
X[,,k] = cbind(df_log, sampleInfo) %>% as_tibble() %>% filter(Days == Day) %>% select(c(colnames(df_log),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
}
# Center and scale
X_cnt = parafac4microbiome::multiwayCenter(X, mode=1)
X_cnt_scl = parafac4microbiome::multiwayScale(X_cnt, mode=2)
milkMetab_df = X_cnt_scl
milkMetab_subjectMeta = subjectMeta
milkMetab_taxonomy = taxonomy_filtered
milkMetab_timepoints = timepoints
inner_join(faeces_subjectMeta)
inner_join(faeces_subjectMeta, milk_subjectMeta)
inner_join(faeces_subjectMeta, milk_subjectMeta, milkMetab_subjectMeta)
faeces_subjectMeta %>% inner_join(milk_subjectMeta)
faeces_subjectMeta %>% inner_join(milk_subjectMeta) %>% inner_join(milkMetab_subjectMeta)
library(tidyverse)
library(ggplot2)
library(stringr)
library(parafac4microbiome)
df = read.csv("./Data/faecesCounts.csv", header=FALSE, sep=" ") %>% as_tibble()
taxonomy = read.csv("./Data/newTaxonomy_faeces.csv", header=FALSE, sep=" ") %>% as_tibble()
sampleInfo = read.csv("./Data/faeces_sampleMeta.csv", header=FALSE, sep=" ") %>% as_tibble()
colnames(sampleInfo) = c("Sample", "RCID", "BMI", "BMI.group", "Days", "Gestational.age", "C.section", "AB.infant", "AB.mother", "Secretor", "Lewis", "subject")
# Make subject metadata
subjectMeta = sampleInfo %>% select(subject, BMI, BMI.group, C.section, Secretor, Lewis) %>% unique() %>% arrange(subject)
# Filter taxa to taxa with at least 1 non-zero value
featureMask = colSums(df) > 0
df = df[,featureMask]
taxonomy = taxonomy[featureMask,]
# Filter based on sparsity
# TODO: filter using group information
threshold = 0.75
sparsity = colSums(df==0) / nrow(df)
featureSelection = sparsity <= threshold
taxonomy_filtered = taxonomy[featureSelection,]
df_filtered = df[,featureSelection]
# CLR
df_clr = t(apply(df_filtered+1, 1, function(x){log(x / compositions::geometricmean(x))})) %>% as_tibble()
# Make into cube
I = length(unique(sampleInfo$subject))
J = ncol(df_clr)
K = length(unique(sampleInfo$Days))
X = array(0L, c(I,J,K))
timepoints = sampleInfo %>% arrange(Days) %>% select(Days) %>% unique() %>% pull()
for(k in 1:K){
Day = timepoints[k]
X[,,k] = cbind(df_clr, sampleInfo) %>% as_tibble() %>% filter(Days == Day) %>% select(c(colnames(df_clr),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
}
# Center and scale
X_cnt = parafac4microbiome::multiwayCenter(X, mode=1)
X_cnt_scl = parafac4microbiome::multiwayScale(X_cnt, mode=2)
faeces_df = X_cnt_scl
faeces_subjectMeta = subjectMeta
faeces_taxonomy = taxonomy_filtered
faeces_timepoints = timepoints
df = read.csv("./Data/milkCounts.csv", header=FALSE, sep=" ") %>% as_tibble()
taxonomy = read.csv("./Data/newTaxonomy_milk.csv", header=FALSE, sep=" ") %>% as_tibble()
sampleInfo = read.csv("./Data/milk_sampleMeta.csv", header=FALSE, sep=" ") %>% as_tibble()
colnames(sampleInfo) = c("Sample", "RCID", "BMI", "BMI.group", "Days", "Gestational.age", "C.section", "AB.infant", "AB.mother", "Secretor", "Lewis", "subject")
# Make subject metadata
subjectMeta = sampleInfo %>% select(subject, BMI, BMI.group, C.section, Secretor, Lewis) %>% unique() %>% arrange(subject)
# Filter taxa to taxa with at least 1 non-zero value
featureMask = colSums(df) > 0
df = df[,featureMask]
taxonomy = taxonomy[featureMask,]
# Filter based on sparsity
# TODO: filter using group information
threshold = 0.85
sparsity = colSums(df==0) / nrow(df)
featureSelection = sparsity <= threshold
taxonomy_filtered = taxonomy[featureSelection,]
df_filtered = df[,featureSelection]
# CLR
df_clr = t(apply(df_filtered+1, 1, function(x){log(x / compositions::geometricmean(x))})) %>% as_tibble()
# Make into cube
I = length(unique(sampleInfo$subject))
J = ncol(df_clr)
K = length(unique(sampleInfo$Days))
X = array(0L, c(I,J,K))
timepoints = sampleInfo %>% arrange(Days) %>% select(Days) %>% unique() %>% pull()
for(k in 1:K){
Day = timepoints[k]
X[,,k] = cbind(df_clr, sampleInfo) %>% as_tibble() %>% filter(Days == Day) %>% select(c(colnames(df_clr),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
}
# Center and scale
X_cnt = parafac4microbiome::multiwayCenter(X, mode=1)
X_cnt_scl = parafac4microbiome::multiwayScale(X_cnt, mode=2)
milk_df = X_cnt_scl
milk_subjectMeta = subjectMeta
milk_taxonomy = taxonomy_filtered
milk_timepoints = timepoints
df = read.csv("./Data/milkMetabNumeric.csv", header=FALSE, sep=" ") %>% as_tibble()
taxonomy = read.csv("./Data/milk_metab_CAS_numbers.csv", header=TRUE, sep=" ") %>% as_tibble()
sampleInfo = read.csv("./Data/milkMetab_sampleMeta.csv", header=FALSE, sep=" ") %>% as_tibble()
colnames(sampleInfo) = c("RCID", "BMI", "BMI.group", "Days", "Gestational.age", "C.section", "AB.infant", "AB.mother", "Secretor", "Lewis", "subject")
# Make subject metadata
subjectMeta = sampleInfo %>% select(subject, BMI, BMI.group, C.section, Secretor, Lewis) %>% unique() %>% arrange(subject)
# Remove duplicates
drop = c(27,100,119)
subjectMeta = subjectMeta %>% mutate(index=1:nrow(.)) %>% filter(!index %in% drop) %>% select(-index) %>% arrange(subject)
# Log transform
df_log = log(df)
# Make into cube
I = length(unique(sampleInfo$subject))
J = ncol(df_log)
K = length(unique(sampleInfo$Days))
X = array(0L, c(I,J,K))
timepoints = sampleInfo %>% arrange(Days) %>% select(Days) %>% unique() %>% pull()
for(k in 1:K){
Day = timepoints[k]
X[,,k] = cbind(df_log, sampleInfo) %>% as_tibble() %>% filter(Days == Day) %>% select(c(colnames(df_log),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
}
# Center and scale
X_cnt = parafac4microbiome::multiwayCenter(X, mode=1)
X_cnt_scl = parafac4microbiome::multiwayScale(X_cnt, mode=2)
milkMetab_df = X_cnt_scl
milkMetab_subjectMeta = subjectMeta
milkMetab_taxonomy = taxonomy_filtered
milkMetab_timepoints = timepoints
faeces_subjectMeta %>% inner_join(milk_subjectMeta) %>% inner_join(milkMetab_subjectMeta)
milk_subjectMeta %>% inner_join(milkMetab_subjectMeta)
set(faeces_subjectMeta$subject)
faeces_subjectMeta$subject %>% inner_join(milk_subjectMeta$subject)
?set
??set
intersection
intersect(faeces_subjectMeta$subject, milk_subjectMeta$subject, milkMetab_subjectMeta$subject)
intersect(faeces_subjectMeta$subject, milk_subjectMeta$subject)
intersect(intersect(faeces_subjectMeta$subject, milk_subjectMeta$subject), milkMetab_subjectMeta$subject)
mask = faeces_subjectMeta$subject %in% sharedSubjects)
mask = faeces_subjectMeta$subject %in% sharedSubjects
sharedSubjects = intersect(intersect(faeces_subjectMeta$subject, milk_subjectMeta$subject), milkMetab_subjectMeta$subject)
mask = faeces_subjectMeta$subject %in% sharedSubjects
sum(mask)
dim(sharedSubjects)
length(sharedSubjects)
sharedSubjects = intersect(intersect(faeces_subjectMeta$subject, milk_subjectMeta$subject), milkMetab_subjectMeta$subject)
faeces_homogenized = faeces_df[faeces_subjectMeta$subject %in% sharedSubjects,,]
milk_homogenized = milk_df[milk_subjectMeta$subject %in% sharedSubjects,,]
milkMetab_homogenized = milkMetab_df[milkMetab_subjectMeta$subject %in% sharedSubjects,,]
homogenized_subjectMeta = faeces_subjectMeta %>% filter(subject %in% sharedSubjects) %>% arrange(subject)
homogenized_subjectMeta
dim(faeces_homogenized)
dim(milk_homogenized)
dim(milkMetab_homogenized)
?setupCMTFdata
library(CMTFtoolbox)
datasets = list(faeces_homogenized, milk_homogenized, milkMetab_homogenized)
modes = list(c(1,2,3),c(1,4,5),c(1,6,7))
Z = setupCMTFdata(datasets, modes, normalize=TRUE)
Z$missing
Z$norms
model = acmtf_opt(Z, 2, nstart=10, numCores=10)
model$Fac[[1]]
cbind(model$Fac[[1]], homogenized_subjectMeta
)
cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble()
cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% arrange(BMI.group) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(BMI.group))) + geom_bar(stat="identity")
model$Fac[[5]]
model$Fac[[6]]
model$Fac[[7]]
model$Fac[[8]]
cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble()
cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% ggplot(aes(x=as.factor(BMI.group),y=`1`)) + geom_boxplot() + stat_compare_means()
cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% ggplot(aes(x=as.factor(BMI.group),y=`2`)) + geom_boxplot() + stat_compare_means()
cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% ggplot(aes(x=as.factor(BMI.group),y=`1`)) + geom_boxplot() + stat_compare_means()
cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% ggplot(aes(x=as.factor(Secretor),y=`2`)) + geom_boxplot() + stat_compare_means()
model$f
model = acmtf_opt(Z, 3, nstart=10, numCores=10)
model$f
length(model$Fac)
model$Fac[[8]]
reinflateFac(Fac, Z)
reinflateFac(model$Fac, Z)
reinflatedBlocks = reinflateFac(model$Fac, Z)
reinflatedBlocks[[1]]
multiway::sumsq(reinflateFac(model$Fac, Z))
multiway::sumsq(reinflatedBlocks[[1]])
multiway::sumsq(reinflatedBlocks[[2]])
multiway::sumsq(reinflatedBlocks[[3]])
model = acmtf_opt(Z, 2, nstart=100, numCores=12)
reinflatedBlocks = reinflateFac(model$Fac, Z)
multiway::sumsq(reinflatedBlocks[[1]])
multiway::sumsq(reinflatedBlocks[[2]])
multiway::sumsq(reinflatedBlocks[[3]])
?acmtf_opt
cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble()
cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% ggplot(aes(x=as.factor(BMI.group),y=`1`)) + geom_boxplot() + stat_compare_means()
a = cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% arrange(BMI.group) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(BMI.group))) + geom_bar(stat="identity")
a
cbind(model$Fac[[2]], faeces_taxonomy)
cbind(model$Fac[[2]], faeces_taxonomy) %>% arrange(V2, V3, V4, V5, V6, V7, V1)
cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1)
cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(V3))) + geom_bar(stat="identity")
model$Fac[[3]]
model$Fac[[3]] %>% as_tibble()
model$Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_bar(stat="identity")
cbind(model$Fac[[4]], milk_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(V3))) + geom_bar(stat="identity")
model$Fac[[5]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_bar(stat="identity")
cbind(model$Fac[[6]])
cbind(model$Fac[[6]], milkMetab_taxonomy)
df = read.csv("./Data/milkMetabNumeric.csv", header=FALSE, sep=" ") %>% as_tibble()
taxonomy = read.csv("./Data/milk_metab_CAS_numbers.csv", header=TRUE, sep=" ") %>% as_tibble()
sampleInfo = read.csv("./Data/milkMetab_sampleMeta.csv", header=FALSE, sep=" ") %>% as_tibble()
colnames(sampleInfo) = c("RCID", "BMI", "BMI.group", "Days", "Gestational.age", "C.section", "AB.infant", "AB.mother", "Secretor", "Lewis", "subject")
# Make subject metadata
subjectMeta = sampleInfo %>% select(subject, BMI, BMI.group, C.section, Secretor, Lewis) %>% unique() %>% arrange(subject)
# Remove duplicates
drop = c(27,100,119)
subjectMeta = subjectMeta %>% mutate(index=1:nrow(.)) %>% filter(!index %in% drop) %>% select(-index) %>% arrange(subject)
# Log transform
df_log = log(df)
# Make into cube
I = length(unique(sampleInfo$subject))
J = ncol(df_log)
K = length(unique(sampleInfo$Days))
X = array(0L, c(I,J,K))
timepoints = sampleInfo %>% arrange(Days) %>% select(Days) %>% unique() %>% pull()
for(k in 1:K){
Day = timepoints[k]
X[,,k] = cbind(df_log, sampleInfo) %>% as_tibble() %>% filter(Days == Day) %>% select(c(colnames(df_log),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
}
# Center and scale
X_cnt = parafac4microbiome::multiwayCenter(X, mode=1)
X_cnt_scl = parafac4microbiome::multiwayScale(X_cnt, mode=2)
milkMetab_df = X_cnt_scl
milkMetab_subjectMeta = subjectMeta
milkMetab_taxonomy = taxonomy
milkMetab_timepoints = timepoints
cbind(model$Fac[[6]], milkMetab_taxonomy)
cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble()
cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(X.CAS)
cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(X.CAS) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`)) + geom_bar()
cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(X.CAS) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`)) + geom_bar(stat="identity")
reinflatedBlocks = reinflateFac(model$Fac, Z)
multiway::sumsq(reinflatedBlocks[[1]])
a = cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% arrange(BMI.group) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(BMI.group))) + geom_bar(stat="identity")
b = cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(V3))) + geom_bar(stat="identity")
c = model$Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_bar(stat="identity")
d = cbind(model$Fac[[4]], milk_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(V3))) + geom_bar(stat="identity")
e = model$Fac[[5]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_bar(stat="identity")
f = cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(X.CAS) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`)) + geom_bar(stat="identity")
g = e = model$Fac[[7]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_bar(stat="identity")
ggarrange(a,b,c,d,e,f,g)
ggarrange(a,b,c,d,e,f,g)
reinflatedBlocks = reinflateFac(model$Fac, Z)
multiway::sumsq(reinflatedBlocks[[1]])
a = cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% arrange(BMI.group) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(BMI.group))) + geom_bar(stat="identity")
b = cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(V3))) + geom_bar(stat="identity")
c = model$Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_bar(stat="identity")
d = cbind(model$Fac[[4]], milk_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(V3))) + geom_bar(stat="identity")
e = model$Fac[[5]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_bar(stat="identity")
f = cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(X.CAS) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`)) + geom_bar(stat="identity")
g = e = model$Fac[[7]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_bar(stat="identity")
h = cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% arrange(BMI.group) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(BMI.group))) + geom_bar(stat="identity")
i = cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(V3))) + geom_bar(stat="identity")
j = model$Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_bar(stat="identity")
k = cbind(model$Fac[[4]], milk_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(V3))) + geom_bar(stat="identity")
l = model$Fac[[5]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_bar(stat="identity")
m = cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(X.CAS) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`)) + geom_bar(stat="identity")
n = e = model$Fac[[7]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_bar(stat="identity")
ggarrange(a,b,c,d,e,f,g,h,i,j,k,l,m,n, nrow=2, ncol=7)
ggarrange(a,b,c,d,e,f,g,h,i,j,k,l,m,n, nrow=2, ncol=7)
reinflatedBlocks = reinflateFac(model$Fac, Z)
multiway::sumsq(reinflatedBlocks[[1]])
a = cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% arrange(BMI.group) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(BMI.group))) + geom_bar(stat="identity") + theme(legend.position="none")
b = cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
c = model$Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_line()
d = cbind(model$Fac[[4]], milk_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
e = model$Fac[[5]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_line()
f = cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(X.CAS) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`)) + geom_bar(stat="identity") + theme(legend.position="none")
g = e = model$Fac[[7]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_line()
h = cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% arrange(BMI.group) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(BMI.group))) + geom_bar(stat="identity") + theme(legend.position="none")
i = cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
j = model$Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_line()
k = cbind(model$Fac[[4]], milk_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
l = model$Fac[[5]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_line()
m = cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(X.CAS) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`)) + geom_bar(stat="identity") + theme(legend.position="none")
n = e = model$Fac[[7]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_line()
ggarrange(a,b,c,d,e,f,g,h,i,j,k,l,m,n, nrow=2, ncol=7)
ggarrange(a,b,c,d,e,f,g,h,i,j,k,l,m,n, nrow=2, ncol=7)
reinflatedBlocks = reinflateFac(model$Fac, Z)
multiway::sumsq(reinflatedBlocks[[1]])
a = cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% arrange(BMI.group) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(BMI.group))) + geom_bar(stat="identity") + theme(legend.position="none")
b = cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
c = model$Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_line()
d = cbind(model$Fac[[4]], milk_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
e = model$Fac[[5]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_line()
f = cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(X.CAS) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`)) + geom_bar(stat="identity") + theme(legend.position="none")
g = e = model$Fac[[7]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_line()
h = cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% arrange(BMI.group) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(BMI.group))) + geom_bar(stat="identity") + theme(legend.position="none")
i = cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
j = model$Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_line()
k = cbind(model$Fac[[4]], milk_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
l = model$Fac[[5]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_line()
m = cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(X.CAS) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`)) + geom_bar(stat="identity") + theme(legend.position="none")
n = model$Fac[[7]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_line()
ggarrange(a,b,c,d,e,f,g,h,i,j,k,l,m,n, nrow=2, ncol=7)
ggarrange(a,b,c,d,e,f,g,h,i,j,k,l,m,n, nrow=2, ncol=7)
a = cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% arrange(BMI.group) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(BMI.group))) + geom_bar(stat="identity") + theme(legend.position="none")
b = cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
c = model$Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_line()
d = cbind(model$Fac[[4]], milk_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
e = model$Fac[[5]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_line()
f = cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(X.CAS) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`)) + geom_bar(stat="identity") + theme(legend.position="none")
g = model$Fac[[7]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_line()
h = cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% arrange(BMI.group) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(BMI.group))) + geom_bar(stat="identity") + theme(legend.position="none")
i = cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
j = model$Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_line()
k = cbind(model$Fac[[4]], milk_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
l = model$Fac[[5]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_line()
m = cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(X.CAS) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`)) + geom_bar(stat="identity") + theme(legend.position="none")
n = model$Fac[[7]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_line()
ggarrange(a,b,c,d,e,f,g,h,i,j,k,l,m,n, nrow=2, ncol=7)
model$Fac[[3]]
c
j
c
j
ggarrange(a,b,c,d,e,f,g,h,i,j,k,l,m,n, nrow=2, ncol=7)
reinflatedBlocks = reinflateFac(model$Fac, Z)
multiway::sumsq(reinflatedBlocks[[1]])
a = cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% arrange(BMI.group, subject) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(BMI.group))) + geom_bar(stat="identity") + theme(legend.position="none")
b = cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
c = model$Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_line()
d = cbind(model$Fac[[4]], milk_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
e = model$Fac[[5]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_line()
f = cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(X.CAS) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`1`)) + geom_bar(stat="identity") + theme(legend.position="none")
g = model$Fac[[7]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V1)) + geom_line()
h = cbind(model$Fac[[1]], homogenized_subjectMeta) %>% as_tibble() %>% arrange(BMI.group, subject) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(BMI.group))) + geom_bar(stat="identity") + theme(legend.position="none")
i = cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
j = model$Fac[[3]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_line()
k = cbind(model$Fac[[4]], milk_taxonomy) %>% as_tibble() %>% arrange(V2, V3, V4, V5, V6, V7, V1) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`,fill=as.factor(V3))) + geom_bar(stat="identity") + theme(legend.position="none")
l = model$Fac[[5]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_line()
m = cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(X.CAS) %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=`2`)) + geom_bar(stat="identity") + theme(legend.position="none")
n = model$Fac[[7]] %>% as_tibble() %>% mutate(index=1:nrow(.)) %>% ggplot(aes(x=index,y=V2)) + geom_line()
ggarrange(a,b,c,d,e,f,g,h,i,j,k,l,m,n, nrow=2, ncol=7)
ggarrange(a,b,c,d,e,f,g,h,i,j,k,l,m,n, nrow=2, ncol=7)
cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble()
cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(`1`)
cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(`1`) %>% select(V7, V8)
cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(`1`) %>% select(V7, V8) %>% head()
cbind(model$Fac[[2]], faeces_taxonomy) %>% as_tibble() %>% arrange(`1`) %>% select(V7, V8) %>% tail()
cbind(model$Fac[[4]], milk_taxonomy) %>% as_tibble()
cbind(model$Fac[[4]], milk_taxonomy) %>% as_tibble() %>% arrange(`1`) %>% select(V7, V8) %>% head()
cbind(model$Fac[[4]], milk_taxonomy) %>% as_tibble() %>% arrange(`1`) %>% select(V7, V8) %>% tail()
cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble()
cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(desc(`1`)) %>% head()
cbind(model$Fac[[6]], milkMetab_taxonomy) %>% as_tibble() %>% arrange(desc(`1`)) %>% tail()
reinflatedBlocks = reinflateFac(model$Fac, Z, returnAsTensor=TRUE)
Z$missing[[1]] * reinflatedBlocks[[1]]
multiway::sumsq(Z$missing[[1]] * reinflatedBlocks[[1]])
multiway::sumsq((Z$missing[[1]] * reinflatedBlocks[[1]])@data)
multiway::sumsq(Z$object[[1]]@data)
multiway::sumsq((Z$missing[[2]] * reinflatedBlocks[[2]])@data)
multiway::sumsq((Z$missing[[3]] * reinflatedBlocks[[3]])@data)
model = acmtf_opt(Z, 2, initialization="nvec")
reinflatedBlocks = reinflateFac(model$Fac, Z, returnAsTensor=TRUE)
multiway::sumsq(Z$missing[[1]] * reinflatedBlocks[[1]])
multiway::sumsq((Z$missing[[1]] * reinflatedBlocks[[1]])@data)
multiway::sumsq((Z$missing[[2]] * reinflatedBlocks[[2]])@data)
multiway::sumsq((Z$missing[[3]] * reinflatedBlocks[[3]])@data)
model$Fac[[8]]
model = acmtf_opt(Z, 2, nstart=100, numCores=12, allOutput=TRUE)
library(tidyverse)
library(ggplot2)
library(stringr)
library(parafac4microbiome)
library(CMTFtoolbox)
df = read.csv("./Data/faecesCounts.csv", header=FALSE, sep=" ") %>% as_tibble()
taxonomy = read.csv("./Data/newTaxonomy_faeces.csv", header=FALSE, sep=" ") %>% as_tibble()
sampleInfo = read.csv("./Data/faeces_sampleMeta.csv", header=FALSE, sep=" ") %>% as_tibble()
colnames(sampleInfo) = c("Sample", "RCID", "BMI", "BMI.group", "Days", "Gestational.age", "C.section", "AB.infant", "AB.mother", "Secretor", "Lewis", "subject")
# Make subject metadata
subjectMeta = sampleInfo %>% select(subject, BMI, BMI.group, C.section, Secretor, Lewis) %>% unique() %>% arrange(subject)
# Filter taxa to taxa with at least 1 non-zero value
featureMask = colSums(df) > 0
df = df[,featureMask]
taxonomy = taxonomy[featureMask,]
# Filter based on sparsity
# TODO: filter using group information
threshold = 0.75
sparsity = colSums(df==0) / nrow(df)
featureSelection = sparsity <= threshold
taxonomy_filtered = taxonomy[featureSelection,]
df_filtered = df[,featureSelection]
# CLR
df_clr = t(apply(df_filtered+1, 1, function(x){log(x / compositions::geometricmean(x))})) %>% as_tibble()
# Make into cube
I = length(unique(sampleInfo$subject))
J = ncol(df_clr)
K = length(unique(sampleInfo$Days))
X = array(0L, c(I,J,K))
timepoints = sampleInfo %>% arrange(Days) %>% select(Days) %>% unique() %>% pull()
for(k in 1:K){
Day = timepoints[k]
X[,,k] = cbind(df_clr, sampleInfo) %>% as_tibble() %>% filter(Days == Day) %>% select(c(colnames(df_clr),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
}
# Center and scale
X_cnt = parafac4microbiome::multiwayCenter(X, mode=1)
X_cnt_scl = parafac4microbiome::multiwayScale(X_cnt, mode=2)
faeces_df = X_cnt_scl
faeces_subjectMeta = subjectMeta
faeces_taxonomy = taxonomy_filtered
faeces_timepoints = timepoints
df = read.csv("./Data/milkCounts.csv", header=FALSE, sep=" ") %>% as_tibble()
taxonomy = read.csv("./Data/newTaxonomy_milk.csv", header=FALSE, sep=" ") %>% as_tibble()
sampleInfo = read.csv("./Data/milk_sampleMeta.csv", header=FALSE, sep=" ") %>% as_tibble()
colnames(sampleInfo) = c("Sample", "RCID", "BMI", "BMI.group", "Days", "Gestational.age", "C.section", "AB.infant", "AB.mother", "Secretor", "Lewis", "subject")
# Make subject metadata
subjectMeta = sampleInfo %>% select(subject, BMI, BMI.group, C.section, Secretor, Lewis) %>% unique() %>% arrange(subject)
# Filter taxa to taxa with at least 1 non-zero value
featureMask = colSums(df) > 0
df = df[,featureMask]
taxonomy = taxonomy[featureMask,]
# Filter based on sparsity
# TODO: filter using group information
threshold = 0.85
sparsity = colSums(df==0) / nrow(df)
featureSelection = sparsity <= threshold
taxonomy_filtered = taxonomy[featureSelection,]
df_filtered = df[,featureSelection]
# CLR
df_clr = t(apply(df_filtered+1, 1, function(x){log(x / compositions::geometricmean(x))})) %>% as_tibble()
# Make into cube
I = length(unique(sampleInfo$subject))
J = ncol(df_clr)
K = length(unique(sampleInfo$Days))
X = array(0L, c(I,J,K))
timepoints = sampleInfo %>% arrange(Days) %>% select(Days) %>% unique() %>% pull()
for(k in 1:K){
Day = timepoints[k]
X[,,k] = cbind(df_clr, sampleInfo) %>% as_tibble() %>% filter(Days == Day) %>% select(c(colnames(df_clr),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
}
# Center and scale
X_cnt = parafac4microbiome::multiwayCenter(X, mode=1)
X_cnt_scl = parafac4microbiome::multiwayScale(X_cnt, mode=2)
milk_df = X_cnt_scl
milk_subjectMeta = subjectMeta
milk_taxonomy = taxonomy_filtered
milk_timepoints = timepoints
df = read.csv("./Data/milkMetabNumeric.csv", header=FALSE, sep=" ") %>% as_tibble()
taxonomy = read.csv("./Data/milk_metab_CAS_numbers.csv", header=TRUE, sep=" ") %>% as_tibble()
sampleInfo = read.csv("./Data/milkMetab_sampleMeta.csv", header=FALSE, sep=" ") %>% as_tibble()
colnames(sampleInfo) = c("RCID", "BMI", "BMI.group", "Days", "Gestational.age", "C.section", "AB.infant", "AB.mother", "Secretor", "Lewis", "subject")
# Make subject metadata
subjectMeta = sampleInfo %>% select(subject, BMI, BMI.group, C.section, Secretor, Lewis) %>% unique() %>% arrange(subject)
# Remove duplicates
drop = c(27,100,119)
subjectMeta = subjectMeta %>% mutate(index=1:nrow(.)) %>% filter(!index %in% drop) %>% select(-index) %>% arrange(subject)
# Log transform
df_log = log(df)
# Make into cube
I = length(unique(sampleInfo$subject))
J = ncol(df_log)
K = length(unique(sampleInfo$Days))
X = array(0L, c(I,J,K))
timepoints = sampleInfo %>% arrange(Days) %>% select(Days) %>% unique() %>% pull()
for(k in 1:K){
Day = timepoints[k]
X[,,k] = cbind(df_log, sampleInfo) %>% as_tibble() %>% filter(Days == Day) %>% select(c(colnames(df_log),subject)) %>% right_join(subjectMeta) %>% arrange(subject) %>% select(-colnames(subjectMeta)) %>% as.matrix()
}
# Center and scale
X_cnt = parafac4microbiome::multiwayCenter(X, mode=1)
X_cnt_scl = parafac4microbiome::multiwayScale(X_cnt, mode=2)
milkMetab_df = X_cnt_scl
milkMetab_subjectMeta = subjectMeta
milkMetab_taxonomy = taxonomy
milkMetab_timepoints = timepoints
sharedSubjects = intersect(intersect(faeces_subjectMeta$subject, milk_subjectMeta$subject), milkMetab_subjectMeta$subject)
faeces_homogenized = faeces_df[faeces_subjectMeta$subject %in% sharedSubjects,,]
milk_homogenized = milk_df[milk_subjectMeta$subject %in% sharedSubjects,,]
milkMetab_homogenized = milkMetab_df[milkMetab_subjectMeta$subject %in% sharedSubjects,,]
homogenized_subjectMeta = faeces_subjectMeta %>% filter(subject %in% sharedSubjects) %>% arrange(subject)
datasets = list(faeces_homogenized, milk_homogenized, milkMetab_homogenized)
modes = list(c(1,2,3),c(1,4,5),c(1,6,7))
Z = setupCMTFdata(datasets, modes, normalize=TRUE)
model = acmtf_opt(Z, 2, nstart=100, numCores=12, allOutput=TRUE)
model[[1]]$varExp
model[[1]]$varExpPerComponent
for(i in 1:10){print(model[[i]]$varExpPerComponent)}
for(i in 1:10){print(model[[i]]$varExpPerComponent*100)}
for(i in 1:10){print(model[[i]]$f)}
?rTensor
model[[5]]$Fac[[1]]
A = read.csv("./Data/Ramus_CMTF_A.csv")
A = read.csv("./Data/Rasmus_CMTF_A.csv")
pwd()
get_wd()
getwd()
A = read.csv("./Rasmus/Data/Rasmus_CMTF_A.csv")
A = read.csv("./Rasmus/Rasmus_CMTF_A.csv")
A
cbind(model[[5]]$Fac[[1]], A)
A = read.csv("./Rasmus/Rasmus_CMTF_A.csv", header=FALSE)
cbind(model[[5]]$Fac[[1]], A)
temp=cbind(model[[5]]$Fac[[1]], A)
cor(temp)
cor(cbind(model[[1]]$Fac[[1]], A))
cor(cbind(model[[10]]$Fac[[1]], A))
cor(cbind(model[[15]]$Fac[[1]], A))
cor(cbind(model[[20]]$Fac[[1]], A))
Z$object[[1]][1,1,1]
Z$object[[1]][1:10,1,1]
Z$object[[1]][1:10,1:10,1]
homogenized_subjectMeta
Z$object[[1]][1:10,1:10,2]
Z$object[[1]][1:10,1:10,3]
Z$object[[2]][1:10,1:10,3]
Z$object[[3]][1:10,1:10,3]
