# print(ksi_term)
# print("=======")
FMS_result[i] = (1 - ksi_term) * abs(FMS)
}
return(min(FMS_result))
}
inputFac = list(A,B,C,D)
result = 1:length(CMTF_010)
for(i in 1:length(CMTF_010)){
result[i] =FMS_to_simulation(inputFac, vect_to_fac(CMTF_010[[i]]$par, Z_010), Z_010$modes)
}
library(CMTFtoolbox)
FMS_to_simulation = function(inputFac, Fac, modes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
normalizedInputFac = normalizeFac(inputFac)
normalizedFac = normalizeFac(Fac)
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,i]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
print(FMS)
}
ksi = ksi + normalizedInputFac$norms[i]
ksi_hat = ksi_hat + normalizedFac$norms[i]
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
# print(FMS)
# print(ksi)
# print(ksi_hat)
# print(ksi_term)
# print("=======")
FMS_result[i] = (1 - ksi_term) * abs(FMS)
}
return(min(FMS_result))
}
inputFac = list(A,B,C,D)
result = 1:length(CMTF_010)
for(i in 1:length(CMTF_010)){
result[i] =FMS_to_simulation(inputFac, vect_to_fac(CMTF_010[[i]]$par, Z_010), Z_010$modes)
}
vect_to_fac
CMTFtoolbox::vect_to_fac
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 12,
fig.height = 6
)
library(CMTFtoolbox)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(rTensor)
set.seed(123)
R = 3
I = 50
J = 50
K = 50
L = 50
modes = list(c(1,2,3), c(1,4))
A = array(rnorm(I*R), c(I, R))  # shared subject mode
B = array(rnorm(J*R), c(J, R))  # distinct feature mode of X1
C = array(rnorm(K*R), c(K, R))  # distinct condition mode of X1
D = array(rnorm(L*R), c(L, R))  # distinct feature mode of X2
df1 = as.tensor(reinflateTensor(A, B, C))
df2 = as.tensor(reinflateMatrix(A, D))
df1_noise = as.tensor(array(rnorm(I*J*K), c(I,J,K)))
df2_noise = as.tensor(array(rnorm(I*L), c(I,L)))
X1_010 = df1 + 0.10 * df1_noise * fnorm(df1) / fnorm(df1_noise)
X1_025 = df1 + 0.25 * df1_noise * fnorm(df1) / fnorm(df1_noise)
X1_035 = df1 + 0.35 * df1_noise * fnorm(df1) / fnorm(df1_noise)
X2_010 = df2 + 0.10 * df2_noise * fnorm(df2) / fnorm(df2_noise)
X2_025 = df2 + 0.25 * df2_noise * fnorm(df2) / fnorm(df2_noise)
X2_035 = df2 + 0.35 * df2_noise * fnorm(df2) / fnorm(df2_noise)
Z_010 = setupCMTFdata(list(X1_010@data, X2_010@data), modes, normalize=FALSE)
Z_025 = setupCMTFdata(list(X1_025@data, X2_025@data), modes, normalize=FALSE)
Z_035 = setupCMTFdata(list(X1_035@data, X2_035@data), modes, normalize=FALSE)
CMTF_010 = cmtf_opt(Z_010, R, initialization="nvec", rel_tol=1e-8, grad_tol=1e-8, max_fn=10^4, max_iter=10^3, nstart=30, numCores=8, allOutput=TRUE)
CMTF_025 = cmtf_opt(Z_025, R, initialization="nvec", rel_tol=1e-8, grad_tol=1e-8, max_fn=10^4, max_iter=10^3, nstart=30, numCores=8, allOutput=TRUE)
CMTF_035 = cmtf_opt(Z_035, R, initialization="nvec", rel_tol=1e-8, grad_tol=1e-8, max_fn=10^4, max_iter=10^3, nstart=30, numCores=8, allOutput=TRUE)
CMTF_010_over = cmtf_opt(Z_010, R+1, initialization="nvec", rel_tol=1e-8, grad_tol=1e-8, max_fn=10^4, max_iter=10^3, nstart=30, numCores=8, allOutput=TRUE)
CMTF_025_over = cmtf_opt(Z_025, R+1, initialization="nvec", rel_tol=1e-8, grad_tol=1e-8, max_fn=10^4, max_iter=10^3, nstart=30, numCores=8, allOutput=TRUE)
CMTF_035_over = cmtf_opt(Z_035, R+1, initialization="nvec", rel_tol=1e-8, grad_tol=1e-8, max_fn=10^4, max_iter=10^3, nstart=30, numCores=8, allOutput=TRUE)
# This is incorrect and should use FMS > (0.99)^numComponents
successRate = function(CMTF_models){
counter = 0
for(i in 1:length(CMTF_models)){
model = CMTF_models[[i]]
if(model$terminate$what == "rel_tol"){
counter = counter + 1
}
}
result = (counter/length(CMTF_models)) * 100
return(result)
}
print(successRate(CMTF_010))
print(successRate(CMTF_010_over))
print(successRate(CMTF_025))
print(successRate(CMTF_025_over))
print(successRate(CMTF_035))
print(successRate(CMTF_035_over))
# This is incorrect and should use FMS > (0.99)^numComponents
successRate = function(CMTF_models){
counter = 0
for(i in 1:length(CMTF_models)){
model = CMTF_models[[i]]
if(model$terminate$what == "rel_tol"){
counter = counter + 1
}
}
result = (counter/length(CMTF_models)) * 100
return(result)
}
print(successRate(CMTF_010))
print(successRate(CMTF_010_over))
print(successRate(CMTF_025))
print(successRate(CMTF_025_over))
print(successRate(CMTF_035))
print(successRate(CMTF_035_over))
FMS_to_simulation = function(inputFac, Fac, modes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
normalizedInputFac = normalizeFac(inputFac)
normalizedFac = normalizeFac(Fac)
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,i]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
print(FMS)
}
ksi = ksi + normalizedInputFac$norms[i]
ksi_hat = ksi_hat + normalizedFac$norms[i]
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
print(FMS)
print(ksi)
print(ksi_hat)
print(ksi_term)
print("=======")
FMS_result[i] = (1 - ksi_term) * abs(FMS)
}
return(min(FMS_result))
}
inputFac = list(A,B,C,D)
result = 1:length(CMTF_010)
for(i in 1:length(CMTF_010)){
result[i] =FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, Z_010$modes)
}
result
FMS_to_simulation = function(inputFac, Fac, modes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
normalizedInputFac = normalizeFac(inputFac)
normalizedFac = normalizeFac(Fac)
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,i]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
print(FMS)
}
ksi = ksi + normalizedInputFac$norms[i]
ksi_hat = ksi_hat + normalizedFac$norms[i]
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
FMS_result[i] = (1 - ksi_term) * abs(FMS)
}
print(FMS_result)
return(min(FMS_result))
}
inputFac = list(A,B,C,D)
result = 1:length(CMTF_010)
for(i in 1:length(CMTF_010)){
result[i] =FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, Z_010$modes)
}
FMS_to_simulation = function(inputFac, Fac, modes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
normalizedInputFac = normalizeFac(inputFac)
normalizedFac = normalizeFac(Fac)
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,i]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
}
ksi = ksi + normalizedInputFac$norms[i]
ksi_hat = ksi_hat + normalizedFac$norms[i]
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
FMS_result[i] = (1 - ksi_term) * abs(FMS)
}
print(FMS_result)
return(min(FMS_result))
}
inputFac = list(A,B,C,D)
result = 1:length(CMTF_010)
for(i in 1:length(CMTF_010)){
result[i] =FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, Z_010$modes)
}
normalizedFac = normalizeFac(inputFac)
normalizedFac$norms
dim(A)
normalizedFac2 = normalizeFac(CMTF_010[[1]]$Fac)
normalizedFac2$norms
FMS_to_simulation = function(inputFac, Fac, modes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
numDatasets = length(modes)
normalizedInputFac = normalizeFac(inputFac)
normalizedFac = normalizeFac(Fac)
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,i]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
}
for(j in 1:numDatasets){
ksi = ksi + normalizedInputFac$normsPerDataset[i,j]
ksi_hat = ksi_hat + normalizedFac$normsPerDataset[i,j]
}
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
FMS_result[i] = (1 - ksi_term) * abs(FMS)
}
print(FMS_result)
return(min(FMS_result))
}
inputFac = list(A,B,C,D)
normalizedFac = normalizeFac(inputFac)
result = 1:length(CMTF_010)
for(i in 1:length(CMTF_010)){
result[i] =FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, Z_010$modes)
}
library(CMTFtoolbox)
FMS_to_simulation = function(inputFac, Fac, modes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
numDatasets = length(modes)
normalizedInputFac = normalizeFac(inputFac)
normalizedFac = normalizeFac(Fac)
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,i]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
}
for(j in 1:numDatasets){
ksi = ksi + normalizedInputFac$normsPerDataset[i,j]
ksi_hat = ksi_hat + normalizedFac$normsPerDataset[i,j]
}
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
FMS_result[i] = (1 - ksi_term) * abs(FMS)
}
print(FMS_result)
return(min(FMS_result))
}
inputFac = list(A,B,C,D)
normalizedFac = normalizeFac(inputFac)
result = 1:length(CMTF_010)
for(i in 1:length(CMTF_010)){
result[i] =FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, Z_010$modes)
}
normalizedFac$norms
CMTFtoolbox::normalizeFac()
CMTFtoolbox:::normalizeFac()
CMTFtoolbox:::normalizeFac
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 12,
fig.height = 6
)
library(CMTFtoolbox)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(rTensor)
set.seed(123)
R = 3
I = 50
J = 50
K = 50
L = 50
modes = list(c(1,2,3), c(1,4))
A = array(rnorm(I*R), c(I, R))  # shared subject mode
B = array(rnorm(J*R), c(J, R))  # distinct feature mode of X1
C = array(rnorm(K*R), c(K, R))  # distinct condition mode of X1
D = array(rnorm(L*R), c(L, R))  # distinct feature mode of X2
df1 = as.tensor(reinflateTensor(A, B, C))
df2 = as.tensor(reinflateMatrix(A, D))
df1_noise = as.tensor(array(rnorm(I*J*K), c(I,J,K)))
df2_noise = as.tensor(array(rnorm(I*L), c(I,L)))
X1_010 = df1 + 0.10 * df1_noise * fnorm(df1) / fnorm(df1_noise)
X1_025 = df1 + 0.25 * df1_noise * fnorm(df1) / fnorm(df1_noise)
X1_035 = df1 + 0.35 * df1_noise * fnorm(df1) / fnorm(df1_noise)
X2_010 = df2 + 0.10 * df2_noise * fnorm(df2) / fnorm(df2_noise)
X2_025 = df2 + 0.25 * df2_noise * fnorm(df2) / fnorm(df2_noise)
X2_035 = df2 + 0.35 * df2_noise * fnorm(df2) / fnorm(df2_noise)
Z_010 = setupCMTFdata(list(X1_010@data, X2_010@data), modes, normalize=FALSE)
Z_025 = setupCMTFdata(list(X1_025@data, X2_025@data), modes, normalize=FALSE)
Z_035 = setupCMTFdata(list(X1_035@data, X2_035@data), modes, normalize=FALSE)
nstart=8
CMTF_010 = cmtf_opt(Z_010, R, initialization="nvec", rel_tol=1e-8, grad_tol=1e-8, max_fn=10^4, max_iter=10^3, nstart=nstart, numCores=8, allOutput=TRUE)
CMTF_025 = cmtf_opt(Z_025, R, initialization="nvec", rel_tol=1e-8, grad_tol=1e-8, max_fn=10^4, max_iter=10^3, nstart=nstart, numCores=8, allOutput=TRUE)
CMTF_035 = cmtf_opt(Z_035, R, initialization="nvec", rel_tol=1e-8, grad_tol=1e-8, max_fn=10^4, max_iter=10^3, nstart=nstart, numCores=8, allOutput=TRUE)
CMTF_010_over = cmtf_opt(Z_010, R+1, initialization="nvec", rel_tol=1e-8, grad_tol=1e-8, max_fn=10^4, max_iter=10^3, nstart=nstart, numCores=8, allOutput=TRUE)
CMTF_025_over = cmtf_opt(Z_025, R+1, initialization="nvec", rel_tol=1e-8, grad_tol=1e-8, max_fn=10^4, max_iter=10^3, nstart=nstart, numCores=8, allOutput=TRUE)
CMTF_035_over = cmtf_opt(Z_035, R+1, initialization="nvec", rel_tol=1e-8, grad_tol=1e-8, max_fn=10^4, max_iter=10^3, nstart=nstart, numCores=8, allOutput=TRUE)
# This is incorrect and should use FMS > (0.99)^numComponents
successRate = function(CMTF_models){
counter = 0
for(i in 1:length(CMTF_models)){
model = CMTF_models[[i]]
if(model$terminate$what == "rel_tol"){
counter = counter + 1
}
}
result = (counter/length(CMTF_models)) * 100
return(result)
}
print(successRate(CMTF_010))
print(successRate(CMTF_010_over))
print(successRate(CMTF_025))
print(successRate(CMTF_025_over))
print(successRate(CMTF_035))
print(successRate(CMTF_035_over))
FMS_to_simulation = function(inputFac, Fac, modes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
numDatasets = length(modes)
normalizedInputFac = normalizeFac(inputFac)
normalizedFac = normalizeFac(Fac)
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,i]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
}
for(j in 1:numDatasets){
ksi = ksi + normalizedInputFac$normsPerDataset[i,j]
ksi_hat = ksi_hat + normalizedFac$normsPerDataset[i,j]
}
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
FMS_result[i] = (1 - ksi_term) * abs(FMS)
}
print(FMS_result)
return(min(FMS_result))
}
inputFac = list(A,B,C,D)
normalizedFac = normalizeFac(inputFac)
FMS_to_simulation = function(inputFac, Fac, modes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
numDatasets = length(modes)
normalizedInputFac = normalizeFac(inputFac)
normalizedFac = normalizeFac(Fac)
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,i]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
}
for(j in 1:numDatasets){
ksi = ksi + normalizedInputFac$normsPerDataset[i,j]
ksi_hat = ksi_hat + normalizedFac$normsPerDataset[i,j]
}
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
FMS_result[i] = (1 - ksi_term) * abs(FMS)
}
print(FMS_result)
return(min(FMS_result))
}
inputFac = list(A,B,C,D)
normalizedFac = normalizeFac(inputFac, Z_010$modes)
result = 1:length(CMTF_010)
for(i in 1:length(CMTF_010)){
result[i] =FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, Z_010$modes)
}
FMS_to_simulation = function(inputFac, Fac, modes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
numDatasets = length(modes)
normalizedInputFac = normalizeFac(inputFac, modes)
normalizedFac = normalizeFac(Fac, modes)
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,i]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
}
for(j in 1:numDatasets){
ksi = ksi + normalizedInputFac$normsPerDataset[i,j]
ksi_hat = ksi_hat + normalizedFac$normsPerDataset[i,j]
}
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
FMS_result[i] = (1 - ksi_term) * abs(FMS)
}
print(FMS_result)
return(min(FMS_result))
}
inputFac = list(A,B,C,D)
normalizedFac = normalizeFac(inputFac, Z_010$modes)
result = 1:length(CMTF_010)
for(i in 1:length(CMTF_010)){
result[i] =FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, Z_010$modes)
}
normalizedFac$normsPerDataset
length(Z_010$object)
FMS_to_simulation = function(inputFac, Fac, modes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
numDatasets = length(modes)
normalizedInputFac = normalizeFac(inputFac, modes)
normalizedFac = normalizeFac(Fac, modes)
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,i]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
}
for(j in 1:numDatasets){
ksi = ksi + normalizedInputFac$normsPerDataset[j,i]
ksi_hat = ksi_hat + normalizedFac$normsPerDataset[j,i]
}
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
FMS_result[i] = (1 - ksi_term) * abs(FMS)
}
print(FMS_result)
return(min(FMS_result))
}
inputFac = list(A,B,C,D)
normalizedFac = normalizeFac(inputFac, Z_010$modes)
result = 1:length(CMTF_010)
for(i in 1:length(CMTF_010)){
result[i] =FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, Z_010$modes)
}
FMS_to_simulation = function(inputFac, Fac, modes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
numDatasets = length(modes)
normalizedInputFac = normalizeFac(inputFac, modes)
normalizedFac = normalizeFac(Fac, modes)
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,i]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
}
for(j in 1:numDatasets){
ksi = ksi + normalizedInputFac$normsPerDataset[j,i]
ksi_hat = ksi_hat + normalizedFac$normsPerDataset[j,i]
}
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
print(FMS)
print(ksi)
print(ksi_hat)
print(ksi_term)
print("============")
FMS_result[i] = (1 - ksi_term) * abs(FMS)
}
print(FMS_result)
return(min(FMS_result))
}
inputFac = list(A,B,C,D)
normalizedFac = normalizeFac(inputFac, Z_010$modes)
result = 1:length(CMTF_010)
for(i in 1:length(CMTF_010)){
result[i] =FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, Z_010$modes)
}
