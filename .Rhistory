b_distinct1 = U[,11]
b_distinct2 = U[,12]
b_distinct3 = U[,13]
r = array(rnorm(numTimepoints*13), c(numTimepoints, 13))
r = sweep(r, 2, colMeans(r), FUN="-")
U = svd(r)$u # creates orthogonal score vectors with norm 1 mean 0
c_global1_X1 = U[,1]
c_global1_X2 = U[,2]
c_global1_X3 = U[,3]
c_global2_X1 = U[,4]
c_global2_X2 = U[,5]
c_global2_X3 = U[,6]
c_local1_X1 = U[,7]
c_local1_X2 = U[,8]
c_local2_X1 = U[,9]
c_local2_X2 = U[,10]
c_distinct1 = U[,11]
c_distinct2 = U[,12]
c_distinct3 = U[,13]
# Block X1
X1_term1 = parafac4microbiome::reinflateTensor(a_global1, b_global1_X1, c_global1_X1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term2 = parafac4microbiome::reinflateTensor(a_global2, b_global2_X1, c_global2_X1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term3 = parafac4microbiome::reinflateTensor(a_local1, b_local1_X1, c_local1_X1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term4 = parafac4microbiome::reinflateTensor(a_local2, b_local2_X1, c_local2_X1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term5 = parafac4microbiome::reinflateTensor(a_distinct1, b_distinct1, c_distinct1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_raw = w_global1 * X1_term1 + w_global2 * X1_term2 + w_local1 * X1_term3 + w_local2 * X1_term4 + w_distinct1 * X1_term5
# Block X2
X2_term1 = parafac4microbiome::reinflateTensor(a_global1, b_global1_X2, c_global1_X2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term2 = parafac4microbiome::reinflateTensor(a_global2, b_global2_X2, c_global2_X2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term3 = parafac4microbiome::reinflateTensor(a_local1, b_local1_X2, c_local1_X2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term4 = parafac4microbiome::reinflateTensor(a_local2, b_local2_X2, c_local2_X2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term5 = parafac4microbiome::reinflateTensor(a_distinct2, b_distinct2, c_distinct2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_raw = w_global1 * X2_term1 + w_global2 * X2_term2 + w_local1 * X2_term3 + w_local2 * X2_term4 + w_distinct2 * X2_term5
# Block X3
X3_term1 = parafac4microbiome::reinflateTensor(a_global1, b_global1_X3, c_global1_X3, returnAsTensor=TRUE) # rTensor::fnorm is 1
X3_term2 = parafac4microbiome::reinflateTensor(a_global2, b_global2_X3, c_global2_X3, returnAsTensor=TRUE) # rTensor::fnorm is 1
X3_term3 = parafac4microbiome::reinflateTensor(a_distinct3, b_distinct3, c_distinct3, returnAsTensor=TRUE) # rTensor::fnorm is 1
X3_raw = w_global1 * X3_term1 + w_global2 * X3_term2 + w_distinct3 * X3_term3
# Create noise
noise1 = as.tensor(array(rnorm(numSubjects*numFeatures*numTimepoints), c(numSubjects, numFeatures, numTimepoints)))
noise2 = as.tensor(array(rnorm(numSubjects*numFeatures*numTimepoints), c(numSubjects, numFeatures, numTimepoints)))
noise3 = as.tensor(array(rnorm(numSubjects*numFeatures*numTimepoints), c(numSubjects, numFeatures, numTimepoints)))
# Center the noise
noise1 = parafac4microbiome::multiwayCenter(noise1)
noise2 = parafac4microbiome::multiwayCenter(noise2)
noise3 = parafac4microbiome::multiwayCenter(noise3)
# Scale the noise
noise1 = parafac4microbiome::multiwayScale(noise1)
noise2 = parafac4microbiome::multiwayScale(noise2)
noise3 = parafac4microbiome::multiwayScale(noise3)
# Put back into Tensor
noise1 = as.tensor(noise1)
noise2 = as.tensor(noise2)
noise3 = as.tensor(noise3)
# Make the noise the right frobenius norm
noise1 = fnorm(X1_raw) / (1/noiseOnX) * (noise1 / fnorm(noise1))
noise2 = fnorm(X2_raw) / (1/noiseOnX) * (noise2 / fnorm(noise2))
noise3 = fnorm(X3_raw) / (1/noiseOnX) * (noise3 / fnorm(noise3))
# Add noise to X blocks
X1_noise = X1_raw + noise1
X2_noise = X2_raw + noise2
X3_noise = X3_raw + noise3
# Center
X1_cnt = parafac4microbiome::multiwayCenter(X1_noise)
X2_cnt = parafac4microbiome::multiwayCenter(X2_noise)
X3_cnt = parafac4microbiome::multiwayCenter(X3_noise)
# Scale
X1_cnt_scl = parafac4microbiome::multiwayScale(X1_cnt)
X2_cnt_scl = parafac4microbiome::multiwayScale(X2_cnt)
X3_cnt_scl = parafac4microbiome::multiwayScale(X3_cnt)
# Define final version of X
X1_final = X1_cnt_scl
X2_final = X2_cnt_scl
X3_final = X3_cnt_scl
Y = rho1 * a_global1 + rho2 * a_global2 + rho3 * a_local1 + rho4 * a_local2
noiseY = rnorm(numSubjects)
noiseY = noiseY - mean(noiseY)
noiseY = (norm(Y, "2") / (1/noiseOnY)) * (noiseY / norm(noiseY, "2"))
Ynoise = Y + noiseY
Ynorm = Ynoise / norm(Ynoise, "2")
Y_final = Ysize * Ynorm
# Convert to Tensor
Y_final = as.tensor(Y_final)
datasets = list(X1_final, X2_final, X3_final)
modes = list(c(1,2,3), c(1,4,5), c(1,6,7))
Z = CMTFtoolbox::setupCMTFdata(datasets, modes, normalize=TRUE)
model_ACMTF = acmtf_opt(Z, numComponents=7, beta=c(1e-4,1e-4,1e-4), abs_tol=1e-9, rel_tol=1e-9, nstart=5, numCores=5, allOutput = TRUE)
model_ACMTF[[1]]$varExp
model_ACMTF[[2]]$varExp
model_ACMTF[[3]]$varExp
model_ACMTF[[4]]$varExp
model_ACMTF[[5]]$varExp
cor(model_ACMTF[[5]]$Fac[[1]], scores)
scores = cbind(a_global1, a_global2, a_local1, a_local2, a_distinct1, a_distinct2, a_distinct3)
round(cor(model_ACMTF[[5]]$Fac[[1]], scores), 2)
model_ACMTF[[1]]$terminate
model_ACMTF[[2]]$terminate
model_ACMTF[[3]]$terminate
model_ACMTF[[4]]$terminate
model_ACMTF[[5]]$terminate
model_ACMTF_alt = acmtf_opt(Z, numComponents=7, beta=c(1e-4,1e-4,1e-4), initialization="nvec", abs_tol=1e-9, rel_tol=1e-9)
model_ACMTF_alt$varExp
model_ACMTF2 = acmtf_opt(Z, numComponents=7, beta=c(1e-4,1e-4,1e-4), abs_tol=1e-9, rel_tol=1e-9, nstart=5, numCores=5, allOutput = TRUE)
cor(model_ACMTF2[[1]]$varExp)
model_ACMTF2[[1]]$varExp
model_ACMTF2[[2]]$varExp
model_ACMTF2[[3]]$varExp
model_ACMTF2[[4]]$varExp
model_ACMTF2[[5]]$varExp
model_ACMTF2 = acmtf_opt(Z, numComponents=7, beta=c(1e-3,1e-3,1e-3), abs_tol=1e-9, rel_tol=1e-9, nstart=5, numCores=5, allOutput = TRUE)
model_ACMTF2[[1]]$varExp
model_ACMTF2[[2]]$varExp
model_ACMTF2[[3]]$varExp
model_ACMTF2[[4]]$varExp
model_ACMTF2[[5]]$varExp
model_ACMTF2 = acmtf_opt(Z, numComponents=7, beta=c(1e-3,1e-3,1e-3), abs_tol=1e-12, rel_tol=1e-12)
model_ACMTF2$varExp
model_ACMTF2 = acmtf_opt(Z, numComponents=7, beta=c(1e-3,1e-3,1e-3), abs_tol=1e-15, rel_tol=1e-15)
model_ACMTF2$varExp
model_ACMTF2 = acmtf_opt(Z, numComponents=7, beta=c(1e-3,1e-3,1e-3), initialization="nvec",abs_tol=1e-15, rel_tol=1e-15)
model_ACMTF2$varExp
fnorm(X1_term1)
fnorm(X1_term2)
fnorm(X1_term3)
fnorm(X1_term4)
fnorm(X1_term5)
# # Center
# X1_cnt = parafac4microbiome::multiwayCenter(X1_noise)
# X2_cnt = parafac4microbiome::multiwayCenter(X2_noise)
# X3_cnt = parafac4microbiome::multiwayCenter(X3_noise)
#
# # Scale
# X1_cnt_scl = parafac4microbiome::multiwayScale(X1_cnt)
# X2_cnt_scl = parafac4microbiome::multiwayScale(X2_cnt)
# X3_cnt_scl = parafac4microbiome::multiwayScale(X3_cnt)
#
# # Define final version of X
# X1_final = X1_cnt_scl
# X2_final = X2_cnt_scl
# X3_final = X3_cnt_scl
X1_final = X1_noise
X2_final = X2_noise
X3_final = X3_noise
datasets = list(X1_final, X2_final, X3_final)
modes = list(c(1,2,3), c(1,4,5), c(1,6,7))
Z = CMTFtoolbox::setupCMTFdata(datasets, modes, normalize=TRUE)
type(X1_final)
class(X1_final)
class(X1_noise)
library(rTensor)
library(CMTFtoolbox)
library(tidyverse)
library(ggplot2)
library(ggpubr)
set.seed(123)
# Sizes of the blocks
numSubjects = 108
numFeatures = 100
numTimepoints = 15
# Settings
Ysize = 1
noiseOnX = 0.00 # Noise percentage on each X block
noiseOnY = 0.00 # Noise percentage on Y
w_global1 = 100
w_global2 = 100
w_local1 = 100
w_local2 = 100
w_distinct1 = 100
w_distinct2 = 100
w_distinct3 = 100
rho1 = 1
rho2 = 0
rho3 = 0
rho4 = 0
r = array(rnorm(numSubjects*7), c(numSubjects, 7))
r = sweep(r, 2, colMeans(r), FUN="-")
U = svd(r)$u # creates orthogonal score vectors with norm 1 mean 0
a_global1 = U[,1]
a_global2 = U[,2]
a_local1 = U[,3]
a_local2 = U[,4]
a_distinct1 = U[,5]
a_distinct2 = U[,6]
a_distinct3 = U[,7]
r = array(rnorm(numFeatures*13), c(numFeatures, 13))
r = sweep(r, 2, colMeans(r), FUN="-")
U = svd(r)$u # creates orthogonal score vectors with norm 1 mean 0
b_global1_X1 = U[,1]
b_global1_X2 = U[,2]
b_global1_X3 = U[,3]
b_global2_X1 = U[,4]
b_global2_X2 = U[,5]
b_global2_X3 = U[,6]
b_local1_X1 = U[,7]
b_local1_X2 = U[,8]
b_local2_X1 = U[,9]
b_local2_X2 = U[,10]
b_distinct1 = U[,11]
b_distinct2 = U[,12]
b_distinct3 = U[,13]
r = array(rnorm(numTimepoints*13), c(numTimepoints, 13))
r = sweep(r, 2, colMeans(r), FUN="-")
U = svd(r)$u # creates orthogonal score vectors with norm 1 mean 0
c_global1_X1 = U[,1]
c_global1_X2 = U[,2]
c_global1_X3 = U[,3]
c_global2_X1 = U[,4]
c_global2_X2 = U[,5]
c_global2_X3 = U[,6]
c_local1_X1 = U[,7]
c_local1_X2 = U[,8]
c_local2_X1 = U[,9]
c_local2_X2 = U[,10]
c_distinct1 = U[,11]
c_distinct2 = U[,12]
c_distinct3 = U[,13]
# Block X1
X1_term1 = parafac4microbiome::reinflateTensor(a_global1, b_global1_X1, c_global1_X1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term2 = parafac4microbiome::reinflateTensor(a_global2, b_global2_X1, c_global2_X1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term3 = parafac4microbiome::reinflateTensor(a_local1, b_local1_X1, c_local1_X1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term4 = parafac4microbiome::reinflateTensor(a_local2, b_local2_X1, c_local2_X1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term5 = parafac4microbiome::reinflateTensor(a_distinct1, b_distinct1, c_distinct1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_raw = w_global1 * X1_term1 + w_global2 * X1_term2 + w_local1 * X1_term3 + w_local2 * X1_term4 + w_distinct1 * X1_term5
# Block X2
X2_term1 = parafac4microbiome::reinflateTensor(a_global1, b_global1_X2, c_global1_X2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term2 = parafac4microbiome::reinflateTensor(a_global2, b_global2_X2, c_global2_X2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term3 = parafac4microbiome::reinflateTensor(a_local1, b_local1_X2, c_local1_X2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term4 = parafac4microbiome::reinflateTensor(a_local2, b_local2_X2, c_local2_X2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term5 = parafac4microbiome::reinflateTensor(a_distinct2, b_distinct2, c_distinct2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_raw = w_global1 * X2_term1 + w_global2 * X2_term2 + w_local1 * X2_term3 + w_local2 * X2_term4 + w_distinct2 * X2_term5
# Block X3
X3_term1 = parafac4microbiome::reinflateTensor(a_global1, b_global1_X3, c_global1_X3, returnAsTensor=TRUE) # rTensor::fnorm is 1
X3_term2 = parafac4microbiome::reinflateTensor(a_global2, b_global2_X3, c_global2_X3, returnAsTensor=TRUE) # rTensor::fnorm is 1
X3_term3 = parafac4microbiome::reinflateTensor(a_distinct3, b_distinct3, c_distinct3, returnAsTensor=TRUE) # rTensor::fnorm is 1
X3_raw = w_global1 * X3_term1 + w_global2 * X3_term2 + w_distinct3 * X3_term3
# Create noise
noise1 = as.tensor(array(rnorm(numSubjects*numFeatures*numTimepoints), c(numSubjects, numFeatures, numTimepoints)))
noise2 = as.tensor(array(rnorm(numSubjects*numFeatures*numTimepoints), c(numSubjects, numFeatures, numTimepoints)))
noise3 = as.tensor(array(rnorm(numSubjects*numFeatures*numTimepoints), c(numSubjects, numFeatures, numTimepoints)))
# Center the noise
noise1 = parafac4microbiome::multiwayCenter(noise1)
noise2 = parafac4microbiome::multiwayCenter(noise2)
noise3 = parafac4microbiome::multiwayCenter(noise3)
# Scale the noise
noise1 = parafac4microbiome::multiwayScale(noise1)
noise2 = parafac4microbiome::multiwayScale(noise2)
noise3 = parafac4microbiome::multiwayScale(noise3)
# Put back into Tensor
noise1 = as.tensor(noise1)
noise2 = as.tensor(noise2)
noise3 = as.tensor(noise3)
# Make the noise the right frobenius norm
noise1 = fnorm(X1_raw) / (1/noiseOnX) * (noise1 / fnorm(noise1))
noise2 = fnorm(X2_raw) / (1/noiseOnX) * (noise2 / fnorm(noise2))
noise3 = fnorm(X3_raw) / (1/noiseOnX) * (noise3 / fnorm(noise3))
# Add noise to X blocks
X1_noise = X1_raw + noise1
X2_noise = X2_raw + noise2
X3_noise = X3_raw + noise3
# # Center
# X1_cnt = parafac4microbiome::multiwayCenter(X1_noise)
# X2_cnt = parafac4microbiome::multiwayCenter(X2_noise)
# X3_cnt = parafac4microbiome::multiwayCenter(X3_noise)
#
# # Scale
# X1_cnt_scl = parafac4microbiome::multiwayScale(X1_cnt)
# X2_cnt_scl = parafac4microbiome::multiwayScale(X2_cnt)
# X3_cnt_scl = parafac4microbiome::multiwayScale(X3_cnt)
#
# # Define final version of X
# X1_final = X1_cnt_scl
# X2_final = X2_cnt_scl
# X3_final = X3_cnt_scl
X1_final = X1_noise
X2_final = X2_noise
X3_final = X3_noise
Y = rho1 * a_global1 + rho2 * a_global2 + rho3 * a_local1 + rho4 * a_local2
noiseY = rnorm(numSubjects)
noiseY = noiseY - mean(noiseY)
noiseY = (norm(Y, "2") / (1/noiseOnY)) * (noiseY / norm(noiseY, "2"))
Ynoise = Y + noiseY
Ynorm = Ynoise / norm(Ynoise, "2")
Y_final = Ysize * Ynorm
# Convert to Tensor
Y_final = as.tensor(Y_final)
datasets = list(X1_final, X2_final, X3_final)
modes = list(c(1,2,3), c(1,4,5), c(1,6,7))
Z = CMTFtoolbox::setupCMTFdata(datasets, modes, normalize=TRUE)
# # Center
# X1_cnt = parafac4microbiome::multiwayCenter(X1_noise)
# X2_cnt = parafac4microbiome::multiwayCenter(X2_noise)
# X3_cnt = parafac4microbiome::multiwayCenter(X3_noise)
#
# # Scale
# X1_cnt_scl = parafac4microbiome::multiwayScale(X1_cnt)
# X2_cnt_scl = parafac4microbiome::multiwayScale(X2_cnt)
# X3_cnt_scl = parafac4microbiome::multiwayScale(X3_cnt)
#
# # Define final version of X
# X1_final = X1_cnt_scl
# X2_final = X2_cnt_scl
# X3_final = X3_cnt_scl
X1_final = X1_noise@data
X2_final = X2_noise@data
X3_final = X3_noise@data
datasets = list(X1_final, X2_final, X3_final)
modes = list(c(1,2,3), c(1,4,5), c(1,6,7))
Z = CMTFtoolbox::setupCMTFdata(datasets, modes, normalize=TRUE)
model_ACMTF = acmtf_opt(Z, numComponents=7, beta=c(1e-3,1e-3,1e-3), abs_tol=1e-9, rel_tol=1e-9, nstart=5, numCores=5, allOutput = TRUE)
model_ACMTF[[1]]$varExp
model_ACMTF[[2]]$varExp
model_ACMTF[[3]]$varExp
model_ACMTF[[4]]$varExp
model_ACMTF[[5]]$varExp
library(rTensor)
library(CMTFtoolbox)
library(tidyverse)
library(ggplot2)
library(ggpubr)
set.seed(123)
# Sizes of the blocks
numSubjects = 108
numFeatures = 100
numTimepoints = 15
# Settings
Ysize = 1
noiseOnX = 0.00 # Noise percentage on each X block
noiseOnY = 0.00 # Noise percentage on Y
w_global1 = 1
w_global2 = 1
w_local1 = 1
w_local2 = 1
w_distinct1 = 1
w_distinct2 = 1
w_distinct3 = 1
rho1 = 1
rho2 = 0
rho3 = 0
rho4 = 0
r = array(rnorm(numSubjects*7), c(numSubjects, 7))
r = sweep(r, 2, colMeans(r), FUN="-")
U = svd(r)$u # creates orthogonal score vectors with norm 1 mean 0
a_global1 = U[,1]
a_global2 = U[,2]
a_local1 = U[,3]
a_local2 = U[,4]
a_distinct1 = U[,5]
a_distinct2 = U[,6]
a_distinct3 = U[,7]
r = array(rnorm(numFeatures*13), c(numFeatures, 13))
r = sweep(r, 2, colMeans(r), FUN="-")
U = svd(r)$u # creates orthogonal score vectors with norm 1 mean 0
b_global1_X1 = U[,1]
b_global1_X2 = U[,2]
b_global1_X3 = U[,3]
b_global2_X1 = U[,4]
b_global2_X2 = U[,5]
b_global2_X3 = U[,6]
b_local1_X1 = U[,7]
b_local1_X2 = U[,8]
b_local2_X1 = U[,9]
b_local2_X2 = U[,10]
b_distinct1 = U[,11]
b_distinct2 = U[,12]
b_distinct3 = U[,13]
r = array(rnorm(numTimepoints*13), c(numTimepoints, 13))
r = sweep(r, 2, colMeans(r), FUN="-")
U = svd(r)$u # creates orthogonal score vectors with norm 1 mean 0
c_global1_X1 = U[,1]
c_global1_X2 = U[,2]
c_global1_X3 = U[,3]
c_global2_X1 = U[,4]
c_global2_X2 = U[,5]
c_global2_X3 = U[,6]
c_local1_X1 = U[,7]
c_local1_X2 = U[,8]
c_local2_X1 = U[,9]
c_local2_X2 = U[,10]
c_distinct1 = U[,11]
c_distinct2 = U[,12]
c_distinct3 = U[,13]
# Block X1
X1_term1 = parafac4microbiome::reinflateTensor(a_global1, b_global1_X1, c_global1_X1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term2 = parafac4microbiome::reinflateTensor(a_global2, b_global2_X1, c_global2_X1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term3 = parafac4microbiome::reinflateTensor(a_local1, b_local1_X1, c_local1_X1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term4 = parafac4microbiome::reinflateTensor(a_local2, b_local2_X1, c_local2_X1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_term5 = parafac4microbiome::reinflateTensor(a_distinct1, b_distinct1, c_distinct1, returnAsTensor=TRUE) # rTensor::fnorm is 1
X1_raw = w_global1 * X1_term1 + w_global2 * X1_term2 + w_local1 * X1_term3 + w_local2 * X1_term4 + w_distinct1 * X1_term5
# Block X2
X2_term1 = parafac4microbiome::reinflateTensor(a_global1, b_global1_X2, c_global1_X2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term2 = parafac4microbiome::reinflateTensor(a_global2, b_global2_X2, c_global2_X2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term3 = parafac4microbiome::reinflateTensor(a_local1, b_local1_X2, c_local1_X2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term4 = parafac4microbiome::reinflateTensor(a_local2, b_local2_X2, c_local2_X2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_term5 = parafac4microbiome::reinflateTensor(a_distinct2, b_distinct2, c_distinct2, returnAsTensor=TRUE) # rTensor::fnorm is 1
X2_raw = w_global1 * X2_term1 + w_global2 * X2_term2 + w_local1 * X2_term3 + w_local2 * X2_term4 + w_distinct2 * X2_term5
# Block X3
X3_term1 = parafac4microbiome::reinflateTensor(a_global1, b_global1_X3, c_global1_X3, returnAsTensor=TRUE) # rTensor::fnorm is 1
X3_term2 = parafac4microbiome::reinflateTensor(a_global2, b_global2_X3, c_global2_X3, returnAsTensor=TRUE) # rTensor::fnorm is 1
X3_term3 = parafac4microbiome::reinflateTensor(a_distinct3, b_distinct3, c_distinct3, returnAsTensor=TRUE) # rTensor::fnorm is 1
X3_raw = w_global1 * X3_term1 + w_global2 * X3_term2 + w_distinct3 * X3_term3
# Create noise
noise1 = as.tensor(array(rnorm(numSubjects*numFeatures*numTimepoints), c(numSubjects, numFeatures, numTimepoints)))
noise2 = as.tensor(array(rnorm(numSubjects*numFeatures*numTimepoints), c(numSubjects, numFeatures, numTimepoints)))
noise3 = as.tensor(array(rnorm(numSubjects*numFeatures*numTimepoints), c(numSubjects, numFeatures, numTimepoints)))
# Center the noise
noise1 = parafac4microbiome::multiwayCenter(noise1)
noise2 = parafac4microbiome::multiwayCenter(noise2)
noise3 = parafac4microbiome::multiwayCenter(noise3)
# Scale the noise
noise1 = parafac4microbiome::multiwayScale(noise1)
noise2 = parafac4microbiome::multiwayScale(noise2)
noise3 = parafac4microbiome::multiwayScale(noise3)
# Put back into Tensor
noise1 = as.tensor(noise1)
noise2 = as.tensor(noise2)
noise3 = as.tensor(noise3)
# Make the noise the right frobenius norm
noise1 = fnorm(X1_raw) / (1/noiseOnX) * (noise1 / fnorm(noise1))
noise2 = fnorm(X2_raw) / (1/noiseOnX) * (noise2 / fnorm(noise2))
noise3 = fnorm(X3_raw) / (1/noiseOnX) * (noise3 / fnorm(noise3))
# Add noise to X blocks
X1_noise = X1_raw + noise1
X2_noise = X2_raw + noise2
X3_noise = X3_raw + noise3
# # Center
# X1_cnt = parafac4microbiome::multiwayCenter(X1_noise)
# X2_cnt = parafac4microbiome::multiwayCenter(X2_noise)
# X3_cnt = parafac4microbiome::multiwayCenter(X3_noise)
#
# # Scale
# X1_cnt_scl = parafac4microbiome::multiwayScale(X1_cnt)
# X2_cnt_scl = parafac4microbiome::multiwayScale(X2_cnt)
# X3_cnt_scl = parafac4microbiome::multiwayScale(X3_cnt)
#
# # Define final version of X
# X1_final = X1_cnt_scl
# X2_final = X2_cnt_scl
# X3_final = X3_cnt_scl
X1_final = X1_noise@data
X2_final = X2_noise@data
X3_final = X3_noise@data
Y = rho1 * a_global1 + rho2 * a_global2 + rho3 * a_local1 + rho4 * a_local2
noiseY = rnorm(numSubjects)
noiseY = noiseY - mean(noiseY)
noiseY = (norm(Y, "2") / (1/noiseOnY)) * (noiseY / norm(noiseY, "2"))
Ynoise = Y + noiseY
Ynorm = Ynoise / norm(Ynoise, "2")
Y_final = Ysize * Ynorm
# Convert to Tensor
Y_final = as.tensor(Y_final)
parafac4microbiome::parafac(X1_noise, 5)
model1=parafac4microbiome::parafac(X1_noise, 5)
model2=parafac4microbiome::parafac(X2_noise, 5)
model3=parafac4microbiome::parafac(X3_noise, 3)
scores = cbind(a_global1, a_global2, a_local1, a_local2, a_distinct1, a_distinct2, a_distinct3)
cor(model1$Fac[[1]], scores)
cor(model2$Fac[[1]], scores)
cor(model3$Fac[[1]], scores)
model3=parafac4microbiome::parafac(X3_noise, 3)
model1=parafac4microbiome::parafac(X1_noise, 5)
cor(model3$Fac[[1]], scores)
cor(model1$Fac[[1]], scores)
model1=parafac4microbiome::parafac(X1_noise, 5)
cor(model1$Fac[[1]], scores)
model1=parafac4microbiome::parafac(X1_noise, 5)
cor(model1$Fac[[1]], scores)
model1=parafac4microbiome::parafac(X1_noise, 5)
cor(model1$Fac[[1]], scores)
?parafac
model1=parafac4microbiome::parafac(X1_noise, 5, ctol=1e-6)
cor(model1$Fac[[1]], scores)
model1=parafac4microbiome::parafac(X1_noise, 5, ctol=1e-6)
cor(model1$Fac[[1]], scores)
model1=parafac4microbiome::parafac(X1_noise, 5, ctol=1e-6)
cor(model1$Fac[[1]], scores)
datasets = list(X1_final, X2_final, X3_final)
modes = list(c(1,2,3), c(1,4,5), c(1,6,7))
Z = CMTFtoolbox::setupCMTFdata(datasets, modes, normalize=TRUE)
model_ACMTF = acmtf_opt(Z, numComponents=7, beta=c(1e-3,1e-3,1e-3), abs_tol=1e-10, rel_tol=1e-10, nstart=1)
cor(model_ACMTF$Fac[[1]], scores)
model_ACMTF = acmtf_opt(Z, numComponents=7, beta=c(1e-3,1e-3,1e-3), abs_tol=1e-12, rel_tol=1e-12, nstart=1)
cor(model_ACMTF$Fac[[1]], scores)
model_ACMTF = acmtf_opt(Z, numComponents=7, beta=c(1e-3,1e-3,1e-3), abs_tol=1e-12, rel_tol=1e-12, nstart=12, numCores=6)
cor(model_ACMTF[[1]]$Fac[[1]], scores)
model_ACMTF[[1]]
cor(model_ACMTF$Fac[[1]], scores)
selected_model_ACMTF = model_ACMTF
a = cbind(selected_model_ACMTF$Fac[[1]][,1], a_global1) %>% as_tibble() %>% ggplot(aes(x=a_global,y=V1)) + geom_point() + ggtitle("Common 1") + xlab("Real scores") + ylab("ACMTF")
b = cbind(selected_model_ACMTF$Fac[[1]][,2], a_global2) %>% as_tibble() %>% ggplot(aes(x=a_global,y=V1)) + geom_point() + ggtitle("Common 2") + xlab("Real scores") + ylab("ACMTF")
c = cbind(selected_model_ACMTF$Fac[[1]][,4], a_local1) %>% as_tibble() %>% ggplot(aes(x=a_local,y=V1)) + geom_point() + ggtitle("Local 1") + xlab("Real scores") + ylab("ACMTF")
d = cbind(selected_model_ACMTF$Fac[[1]][,3], a_local2) %>% as_tibble() %>% ggplot(aes(x=a_local,y=V1)) + geom_point() + ggtitle("Local 2") + xlab("Real scores") + ylab("ACMTF")
e = cbind(selected_model_ACMTF$Fac[[1]][,4], a_distinct1) %>% as_tibble() %>% ggplot(aes(x=a_distinct1,y=V1)) + geom_point() + ggtitle("Distinct X1") + xlab("Real scores") + ylab("ACMTF")
f = cbind(selected_model_ACMTF$Fac[[1]][,3], a_distinct2) %>% as_tibble() %>% ggplot(aes(x=a_distinct2,y=V1)) + geom_point() + ggtitle("Distinct X2") + xlab("Real scores") + ylab("ACMTF")
g = cbind(selected_model_ACMTF$Fac[[1]][,4], a_distinct3) %>% as_tibble() %>% ggplot(aes(x=a_distinct3,y=V1)) + geom_point() + ggtitle("Distinct X3") + xlab("Real scores") + ylab("ACMTF")
ggarrange(a,b,c,d,e,f,g)
a = cbind(selected_model_ACMTF$Fac[[1]][,1], a_global1) %>% as_tibble() %>% ggplot(aes(x=a_global1,y=V1)) + geom_point() + ggtitle("Common 1") + xlab("Real scores") + ylab("ACMTF")
b = cbind(selected_model_ACMTF$Fac[[1]][,2], a_global2) %>% as_tibble() %>% ggplot(aes(x=a_global2,y=V1)) + geom_point() + ggtitle("Common 2") + xlab("Real scores") + ylab("ACMTF")
c = cbind(selected_model_ACMTF$Fac[[1]][,4], a_local1) %>% as_tibble() %>% ggplot(aes(x=a_local1,y=V1)) + geom_point() + ggtitle("Local 1") + xlab("Real scores") + ylab("ACMTF")
d = cbind(selected_model_ACMTF$Fac[[1]][,3], a_local2) %>% as_tibble() %>% ggplot(aes(x=a_local2,y=V1)) + geom_point() + ggtitle("Local 2") + xlab("Real scores") + ylab("ACMTF")
e = cbind(selected_model_ACMTF$Fac[[1]][,4], a_distinct1) %>% as_tibble() %>% ggplot(aes(x=a_distinct1,y=V1)) + geom_point() + ggtitle("Distinct X1") + xlab("Real scores") + ylab("ACMTF")
f = cbind(selected_model_ACMTF$Fac[[1]][,3], a_distinct2) %>% as_tibble() %>% ggplot(aes(x=a_distinct2,y=V1)) + geom_point() + ggtitle("Distinct X2") + xlab("Real scores") + ylab("ACMTF")
g = cbind(selected_model_ACMTF$Fac[[1]][,4], a_distinct3) %>% as_tibble() %>% ggplot(aes(x=a_distinct3,y=V1)) + geom_point() + ggtitle("Distinct X3") + xlab("Real scores") + ylab("ACMTF")
ggarrange(a,b,c,d,e,f,g)
a = cbind(selected_model_ACMTF$Fac[[1]][,1], a_global1) %>% as_tibble() %>% ggplot(aes(x=a_global1,y=V1)) + geom_point() + ggtitle("Common 1") + xlab("Real scores") + ylab("ACMTF")
b = cbind(selected_model_ACMTF$Fac[[1]][,2], a_global2) %>% as_tibble() %>% ggplot(aes(x=a_global2,y=V1)) + geom_point() + ggtitle("Common 2") + xlab("Real scores") + ylab("ACMTF")
c = cbind(selected_model_ACMTF$Fac[[1]][,4], a_local1) %>% as_tibble() %>% ggplot(aes(x=a_local1,y=V1)) + geom_point() + ggtitle("Local 1") + xlab("Real scores") + ylab("ACMTF")
d = cbind(selected_model_ACMTF$Fac[[1]][,3], a_local2) %>% as_tibble() %>% ggplot(aes(x=a_local2,y=V1)) + geom_point() + ggtitle("Local 2") + xlab("Real scores") + ylab("ACMTF")
e = cbind(selected_model_ACMTF$Fac[[1]][,6], a_distinct1) %>% as_tibble() %>% ggplot(aes(x=a_distinct1,y=V1)) + geom_point() + ggtitle("Distinct X1") + xlab("Real scores") + ylab("ACMTF")
f = cbind(selected_model_ACMTF$Fac[[1]][,7], a_distinct2) %>% as_tibble() %>% ggplot(aes(x=a_distinct2,y=V1)) + geom_point() + ggtitle("Distinct X2") + xlab("Real scores") + ylab("ACMTF")
g = cbind(selected_model_ACMTF$Fac[[1]][,5], a_distinct3) %>% as_tibble() %>% ggplot(aes(x=a_distinct3,y=V1)) + geom_point() + ggtitle("Distinct X3") + xlab("Real scores") + ylab("ACMTF")
ggarrange(a,b,c,d,e,f,g)
ggarrange(a,b,c,d,e,f,g, nrow=1)
