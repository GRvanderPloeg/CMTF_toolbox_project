Z_025_norm = setupCMTFdata(list(X1_025_norm@data, X2_025_norm@data), modes, normalize=FALSE)
Z_035_norm = setupCMTFdata(list(X1_035_norm@data, X2_035_norm@data), modes, normalize=FALSE)
# Settings
nstart = 12 # 30
rel_tol = 1e-8
grad_tol = 1e-8
max_fn = 10^4
max_iter = 10^3
numCores = detectCores()
print(numCores)
CMTF_010 = cmtf_opt(Z_010, R, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_025 = cmtf_opt(Z_025, R, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_035 = cmtf_opt(Z_035, R, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_010_norm = cmtf_opt(Z_010_norm, R, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_025_norm = cmtf_opt(Z_025_norm, R, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_035_norm = cmtf_opt(Z_035_norm, R, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
# Recreate input Fac using the component sizes to sort by size
inputFac = list(Anorm, Bnorm, Cnorm, Dnorm)
result_Tensor_Matrix = array(0L, c(6, length(CMTF_010)))
for(i in 1:length(CMTF_010)){
result_Tensor_Matrix[1,i] = FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, Z_010$modes)
result_Tensor_Matrix[2,i] = FMS_to_simulation(inputFac, CMTF_025[[i]]$Fac, Z_010$modes)
result_Tensor_Matrix[3,i] = FMS_to_simulation(inputFac, CMTF_035[[i]]$Fac, Z_010$modes)
result_Tensor_Matrix[4,i] = FMS_to_simulation(inputFac, CMTF_010_norm[[i]]$Fac, Z_010$modes)
result_Tensor_Matrix[5,i] = FMS_to_simulation(inputFac, CMTF_025_norm[[i]]$Fac, Z_010$modes)
result_Tensor_Matrix[6,i] = FMS_to_simulation(inputFac, CMTF_035_norm[[i]]$Fac, Z_010$modes)
}
result_Tensor_Matrix
rowSums((result_Tensor_Matrix > 0.99^4) / nstart) * 100
rowMeans(result_Tensor_Matrix)
write.csv(result_Tensor_Matrix, "./noise_sim_tensor_matrix_output.csv")
FMS_to_simulation = function(inputFac, Fac, modes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
numDatasets = length(modes)
normalizedInputFac = normalizeFac(inputFac, modes)
normalizedFac = normalizeFac(Fac, modes)
# Find which components match between the model and the input
matchingComponents = apply(abs(cor(normalizedInputFac$Fac[[1]], normalizedFac$Fac[[1]])), 2, which.max)
print(matchingComponents)
# Calculate FMS
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
matchingComponent = matchingComponents[i]
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,matchingComponent]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
}
for(j in 1:numDatasets){
ksi = ksi + normalizedInputFac$normsPerDataset[j,matchingComponent]
ksi_hat = ksi_hat + normalizedFac$normsPerDataset[j,i]
}
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
FMS_result[i] = (1 - ksi_term) * abs(FMS)
print(ksi)
print(ksi_hat)
print(ksi_term)
print(1-ksi_term)
print(abs(FMS))
print("===========")
}
return(min(FMS_result))
}
i=1
FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, Z_010$modes)
inputFac = list(A,B,C,D)
inputFacnorm = list(Anorm, Bnorm, Cnorm, Dnorm)
result_Tensor_Matrix = array(0L, c(6, length(CMTF_010)))
for(i in 1:length(CMTF_010)){
result_Tensor_Matrix[1,i] = FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, Z_010$modes)
result_Tensor_Matrix[2,i] = FMS_to_simulation(inputFac, CMTF_025[[i]]$Fac, Z_010$modes)
result_Tensor_Matrix[3,i] = FMS_to_simulation(inputFac, CMTF_035[[i]]$Fac, Z_010$modes)
result_Tensor_Matrix[4,i] = FMS_to_simulation(inputFacnorm, CMTF_010_norm[[i]]$Fac, Z_010$modes)
result_Tensor_Matrix[5,i] = FMS_to_simulation(inputFacnorm, CMTF_025_norm[[i]]$Fac, Z_010$modes)
result_Tensor_Matrix[6,i] = FMS_to_simulation(inputFacnorm, CMTF_035_norm[[i]]$Fac, Z_010$modes)
}
result_Tensor_Matrix
rowSums((result_Tensor_Matrix > 0.99^4) / nstart) * 100
rowMeans(result_Tensor_Matrix)
i=1
FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, Z_010$modes)
FMS_to_simulation = function(inputFac, Fac, modes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
numDatasets = length(modes)
normalizedInputFac = normalizeFac(inputFac, modes)
normalizedFac = normalizeFac(Fac, modes)
# Find which components match between the model and the input
matchingComponents = apply(abs(cor(normalizedInputFac$Fac[[1]], normalizedFac$Fac[[1]])), 2, which.max)
print(matchingComponents)
print(normalizedInputFac$normsPerDataset)
print(normalizedFac$normsPerDataset)
# Calculate FMS
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
matchingComponent = matchingComponents[i]
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,matchingComponent]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
}
for(j in 1:numDatasets){
ksi = ksi + normalizedInputFac$normsPerDataset[j,matchingComponent]
ksi_hat = ksi_hat + normalizedFac$normsPerDataset[j,i]
}
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
FMS_result[i] = (1 - ksi_term) * abs(FMS)
print(ksi)
print(ksi_hat)
print(ksi_term)
print(1-ksi_term)
print(abs(FMS))
print("===========")
}
return(min(FMS_result))
}
FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, Z_010$modes)
round(abs(rnorm(1, sd=25))) + 1
round(abs(rnorm(1, sd=25))) + 1
round(abs(rnorm(1, sd=25))) + 1
round(abs(rnorm(1, sd=25))) + 1
?rnorm
componentSizes
FMS_to_simulation = function(inputFac, Fac, modes, componentSizes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
numDatasets = length(modes)
normalizedInputFac = normalizeFac(inputFac, modes)
normalizedFac = normalizeFac(Fac, modes)
# Find which components match between the model and the input
matchingComponents = apply(abs(cor(normalizedInputFac$Fac[[1]], normalizedFac$Fac[[1]])), 2, which.max)
print(matchingComponents)
print(normalizedInputFac$normsPerDataset)
print(normalizedFac$normsPerDataset)
# Calculate FMS
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
matchingComponent = matchingComponents[i]
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,matchingComponent]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
}
for(j in 1:numDatasets){
ksi = ksi + componentSizes[j,matchingComponent]
ksi_hat = ksi_hat + normalizedFac$normsPerDataset[j,i]
}
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
FMS_result[i] = (1 - ksi_term) * abs(FMS)
print(ksi)
print(ksi_hat)
print(ksi_term)
print(1-ksi_term)
print(abs(FMS))
print("===========")
}
return(min(FMS_result))
}
modes
inputFac = list(Anorm, Bnorm, Cnorm, Dnorm)
result_Tensor_Matrix = array(0L, c(6, length(CMTF_010)))
for(i in 1:length(CMTF_010)){
result_Tensor_Matrix[1,i] = FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[2,i] = FMS_to_simulation(inputFac, CMTF_025[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[3,i] = FMS_to_simulation(inputFac, CMTF_035[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[4,i] = FMS_to_simulation(inputFac, CMTF_010_norm[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[5,i] = FMS_to_simulation(inputFac, CMTF_025_norm[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[6,i] = FMS_to_simulation(inputFac, CMTF_035_norm[[i]]$Fac, modes, componentSizes)
}
componentSizes
FMS_to_simulation = function(inputFac, Fac, modes, componentSizes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
numDatasets = length(modes)
normalizedInputFac = normalizeFac(inputFac, modes)
normalizedFac = normalizeFac(Fac, modes)
# Find which components match between the model and the input
matchingComponents = apply(abs(cor(normalizedInputFac$Fac[[1]], normalizedFac$Fac[[1]])), 2, which.max)
print(matchingComponents)
print(normalizedInputFac$normsPerDataset)
print(normalizedFac$normsPerDataset)
# Calculate FMS
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
matchingComponent = matchingComponents[i]
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,matchingComponent]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
}
for(j in 1:numDatasets){
ksi = ksi + t(componentSizes)[j,matchingComponent]
ksi_hat = ksi_hat + normalizedFac$normsPerDataset[j,i]
}
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
FMS_result[i] = (1 - ksi_term) * abs(FMS)
print(ksi)
print(ksi_hat)
print(ksi_term)
print(1-ksi_term)
print(abs(FMS))
print("===========")
}
return(min(FMS_result))
}
inputFac = list(Anorm, Bnorm, Cnorm, Dnorm)
result_Tensor_Matrix = array(0L, c(6, length(CMTF_010)))
for(i in 1:length(CMTF_010)){
result_Tensor_Matrix[1,i] = FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[2,i] = FMS_to_simulation(inputFac, CMTF_025[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[3,i] = FMS_to_simulation(inputFac, CMTF_035[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[4,i] = FMS_to_simulation(inputFac, CMTF_010_norm[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[5,i] = FMS_to_simulation(inputFac, CMTF_025_norm[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[6,i] = FMS_to_simulation(inputFac, CMTF_035_norm[[i]]$Fac, modes, componentSizes)
}
result_Tensor_Matrix
rowSums((result_Tensor_Matrix > 0.99^4) / nstart) * 100
rowMeans(result_Tensor_Matrix)
i=1
FMS_to_simulation(inputFac, CMTF_010_norm[[i]]$Fac, modes, componentSizes)
componentSizes
componentSizes
componentSizes_norm = array(1L, c(R, numDatasets))
componentSizes_norm = array(1L, c(R, length(Z$object)))
componentSizes_norm = array(1L, c(R, length(Z_010$object)))
componentSizes_norm
inputFac = list(Anorm, Bnorm, Cnorm, Dnorm)
componentSizes_norm = array(1L, c(R, length(Z_010$object)))
result_Tensor_Matrix = array(0L, c(6, length(CMTF_010)))
for(i in 1:length(CMTF_010)){
result_Tensor_Matrix[1,i] = FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[2,i] = FMS_to_simulation(inputFac, CMTF_025[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[3,i] = FMS_to_simulation(inputFac, CMTF_035[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[4,i] = FMS_to_simulation(inputFac, CMTF_010_norm[[i]]$Fac, modes, componentSizes_norm)
result_Tensor_Matrix[5,i] = FMS_to_simulation(inputFac, CMTF_025_norm[[i]]$Fac, modes, componentSizes_norm)
result_Tensor_Matrix[6,i] = FMS_to_simulation(inputFac, CMTF_035_norm[[i]]$Fac, modes, componentSizes_norm)
}
result_Tensor_Matrix
rowSums((result_Tensor_Matrix > 0.99^4) / nstart) * 100
rowMeans(result_Tensor_Matrix)
i=7
FMS_to_simulation(inputFac, CMTF_025_norm[[i]]$Fac, modes, componentSizes_norm)
?RDS
?saveRDS
library(CMTFtoolbox)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(rTensor)
library(parallel)
set.seed(123)
FMS_to_simulation = function(inputFac, Fac, modes, componentSizes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
numDatasets = length(modes)
normalizedInputFac = normalizeFac(inputFac, modes)
normalizedFac = normalizeFac(Fac, modes)
# Find which components match between the model and the input
matchingComponents = apply(abs(cor(normalizedInputFac$Fac[[1]], normalizedFac$Fac[[1]])), 2, which.max)
# Calculate FMS
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
matchingComponent = matchingComponents[i]
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,matchingComponent]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
}
for(j in 1:numDatasets){
ksi = ksi + t(componentSizes)[j,matchingComponent]
ksi_hat = ksi_hat + normalizedFac$normsPerDataset[j,i]
}
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
FMS_result[i] = (1 - ksi_term) * abs(FMS)
}
return(min(FMS_result))
}
R = 3
I = 50
J = 50
K = 50
L = 50
modes = list(c(1,2,3), c(1,4))
# Generate loading matrices, normalize each vector to 1
A = array(rnorm(I*R), c(I, R))  # shared subject mode
Anorm = sweep(A, 2, apply(A, 2, function(x){norm(as.matrix(x), "F")}), FUN="/")
B = array(rnorm(J*R), c(J, R))  # distinct feature mode of X1
Bnorm = sweep(B, 2, apply(B, 2, function(x){norm(as.matrix(x), "F")}), FUN="/")
C = array(rnorm(K*R), c(K, R))  # distinct condition mode of X1
Cnorm = sweep(C, 2, apply(C, 2, function(x){norm(as.matrix(x), "F")}), FUN="/")
D = array(rnorm(L*R), c(L, R))  # distinct feature mode of X2
Dnorm = sweep(D, 2, apply(D, 2, function(x){norm(as.matrix(x), "F")}), FUN="/")
# Generate datasets without noise
df1 = as.tensor(array(0L, c(I,J,K)))
df1norm = df1
df2 = as.tensor(array(0L, c(I,L)))
df2norm = df2
componentSizes = array(0L, c(R, 2))
for(r in 1:R){
X1_component_norm = as.tensor(reinflateTensor(Anorm[,r], Bnorm[,r], Cnorm[,r]))
X2_component_norm = as.tensor(reinflateMatrix(Anorm[,r], Dnorm[,r]))
X1_component_size = round(abs(rnorm(1, mean=0, sd=25))) + 1
X2_component_size = round(abs(rnorm(1, mean=0, sd=25))) + 1
df1 = df1 + X1_component_size * X1_component_norm
df1norm = df1norm + X1_component_norm
df2 = df2 + X2_component_size * X2_component_norm
df2norm = df2norm + X2_component_norm
componentSizes[r,1] = X1_component_size
componentSizes[r,2] = X2_component_size
}
# Generate noise
df1_noise = as.tensor(array(rnorm(I*J*K), c(I,J,K)))
df2_noise = as.tensor(array(rnorm(I*L), c(I,L)))
# Create final datasets by adding the noise of different sizes to the generated data
X1_010 = df1 + 0.10 * df1_noise * fnorm(df1) / fnorm(df1_noise)
X1_025 = df1 + 0.25 * df1_noise * fnorm(df1) / fnorm(df1_noise)
X1_035 = df1 + 0.35 * df1_noise * fnorm(df1) / fnorm(df1_noise)
X2_010 = df2 + 0.10 * df2_noise * fnorm(df2) / fnorm(df2_noise)
X2_025 = df2 + 0.25 * df2_noise * fnorm(df2) / fnorm(df2_noise)
X2_035 = df2 + 0.35 * df2_noise * fnorm(df2) / fnorm(df2_noise)
X1_010_norm = df1norm + 0.10 * df1_noise * fnorm(df1norm) / fnorm(df1_noise)
X1_025_norm = df1norm + 0.25 * df1_noise * fnorm(df1norm) / fnorm(df1_noise)
X1_035_norm = df1norm + 0.35 * df1_noise * fnorm(df1norm) / fnorm(df1_noise)
X2_010_norm = df2norm + 0.10 * df2_noise * fnorm(df2norm) / fnorm(df2_noise)
X2_025_norm = df2norm + 0.25 * df2_noise * fnorm(df2norm) / fnorm(df2_noise)
X2_035_norm = df2norm + 0.35 * df2_noise * fnorm(df2norm) / fnorm(df2_noise)
# Prepare CMTF input
Z_010 = setupCMTFdata(list(X1_010@data, X2_010@data), modes, normalize=FALSE)
Z_025 = setupCMTFdata(list(X1_025@data, X2_025@data), modes, normalize=FALSE)
Z_035 = setupCMTFdata(list(X1_035@data, X2_035@data), modes, normalize=FALSE)
Z_010_norm = setupCMTFdata(list(X1_010_norm@data, X2_010_norm@data), modes, normalize=FALSE)
Z_025_norm = setupCMTFdata(list(X1_025_norm@data, X2_025_norm@data), modes, normalize=FALSE)
Z_035_norm = setupCMTFdata(list(X1_035_norm@data, X2_035_norm@data), modes, normalize=FALSE)
# Settings
nstart = 12 # 30
rel_tol = 1e-8
grad_tol = 1e-8
max_fn = 10^4
max_iter = 10^3
numCores = detectCores()
print(numCores)
CMTF_010 = cmtf_opt(Z_010, R, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_025 = cmtf_opt(Z_025, R, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_035 = cmtf_opt(Z_035, R, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_010_norm = cmtf_opt(Z_010_norm, R, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_025_norm = cmtf_opt(Z_025_norm, R, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_035_norm = cmtf_opt(Z_035_norm, R, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_010_over = cmtf_opt(Z_010, R+1, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_025_over = cmtf_opt(Z_025, R+1, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_035_over = cmtf_opt(Z_035, R+1, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_010_norm_over = cmtf_opt(Z_010_norm, R+1, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_025_norm_over = cmtf_opt(Z_025_norm, R+1, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
CMTF_035_norm_over = cmtf_opt(Z_035_norm, R+1, initialization="random", rel_tol=rel_tol, grad_tol=grad_tol, max_fn=max_fn, max_iter=max_iter, nstart=nstart, numCores=numCores, allOutput=TRUE)
# Recreate input Fac using the component sizes to sort by size
inputFac = list(Anorm, Bnorm, Cnorm, Dnorm)
componentSizes_norm = array(1L, c(R, length(Z_010$object)))
result_Tensor_Matrix = array(0L, c(12, length(CMTF_010)))
for(i in 1:length(CMTF_010)){
result_Tensor_Matrix[1,i] = FMS_to_simulation(inputFac, CMTF_010[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[2,i] = FMS_to_simulation(inputFac, CMTF_010_over[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[3,i] = FMS_to_simulation(inputFac, CMTF_025[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[4,i] = FMS_to_simulation(inputFac, CMTF_025_over[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[5,i] = FMS_to_simulation(inputFac, CMTF_035[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[6,i] = FMS_to_simulation(inputFac, CMTF_035_over[[i]]$Fac, modes, componentSizes)
result_Tensor_Matrix[7,i] = FMS_to_simulation(inputFac, CMTF_010_norm[[i]]$Fac, modes, componentSizes_norm)
result_Tensor_Matrix[8,i] = FMS_to_simulation(inputFac, CMTF_010_norm_over[[i]]$Fac, modes, componentSizes_norm)
result_Tensor_Matrix[9,i] = FMS_to_simulation(inputFac, CMTF_025_norm[[i]]$Fac, modes, componentSizes_norm)
result_Tensor_Matrix[10,i] = FMS_to_simulation(inputFac, CMTF_025_norm_over[[i]]$Fac, modes, componentSizes_norm)
result_Tensor_Matrix[11,i] = FMS_to_simulation(inputFac, CMTF_035_norm[[i]]$Fac, modes, componentSizes_norm)
result_Tensor_Matrix[12,i] = FMS_to_simulation(inputFac, CMTF_035_norm[[i]]$Fac, modes, componentSizes_norm)
}
result_Tensor_Matrix
rowSums((result_Tensor_Matrix > 0.99^4) / nstart) * 100
rowMeans(result_Tensor_Matrix)
write.csv(result_Tensor_Matrix, "./noise_sim_tensor_matrix_output.csv")
FMS_to_simulation = function(inputFac, Fac, modes, componentSizes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
numDatasets = length(modes)
normalizedInputFac = normalizeFac(inputFac, modes)
normalizedFac = normalizeFac(Fac, modes)
# Find which components match between the model and the input
matchingComponents = apply(abs(cor(normalizedInputFac$Fac[[1]], normalizedFac$Fac[[1]])), 2, which.max)
# Calculate FMS
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
matchingComponent = matchingComponents[i]
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,matchingComponent]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
}
for(j in 1:numDatasets){
ksi = ksi + t(componentSizes)[j,matchingComponent]
ksi_hat = ksi_hat + normalizedFac$normsPerDataset[j,i]
}
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
print(ksi)
print(ksi_hat)
print(ksi_term)
print(1-ksi_term)
print(abs(FMS))
FMS_result[i] = (1 - ksi_term) * abs(FMS)
}
return(min(FMS_result))
}
FMS_to_simulation(inputFac, CMTF_010[[1]]$Fac, modes, componentSizes)
i=1
FMS_to_simulation = function(inputFac, Fac, modes, componentSizes){
numComponents = ncol(Fac[[1]])
numModes = max(unlist(modes))
numDatasets = length(modes)
normalizedInputFac = normalizeFac(inputFac, modes)
normalizedFac = normalizeFac(Fac, modes)
# Find which components match between the model and the input
matchingComponents = apply(abs(cor(normalizedInputFac$Fac[[1]], normalizedFac$Fac[[1]])), 2, which.max)
print(matchingComponents)
# Calculate FMS
FMS_result = 1:numComponents
for(i in 1:numComponents){
FMS = 1
ksi = 0
ksi_hat = 0
matchingComponent = matchingComponents[i]
for(j in 1:numModes){
vect1 = normalizedInputFac$Fac[[j]][,matchingComponent]
vect2 = normalizedFac$Fac[[j]][,i]
FMS = FMS * (t(vect1) %*% vect2)
}
for(j in 1:numDatasets){
ksi = ksi + t(componentSizes)[j,matchingComponent]
ksi_hat = ksi_hat + normalizedFac$normsPerDataset[j,i]
}
ksi_term = ((abs(ksi - ksi_hat)) / max(ksi, ksi_hat))
print(ksi)
print(ksi_hat)
print(ksi_term)
print(1-ksi_term)
print(abs(FMS))
FMS_result[i] = (1 - ksi_term) * abs(FMS)
}
return(min(FMS_result))
}
FMS_to_simulation(inputFac, CMTF_010[[1]]$Fac, modes, componentSizes)
cor(Anorm, CMTF_010[[1]]$Fac[[1]])
result_Tensor_Matrix
round(result_Tensor_Matrix,3)
cor(Anorm, CMTF_010[[1]]$Fac[[1]])
cor(Anorm, CMTF_010[[2]]$Fac[[1]])
cor(Anorm, CMTF_010[[9]]$Fac[[1]])
FMS_to_simulation(inputFac, CMTF_035_over[[1]]$Fac, modes, componentSizes)
cor(Anorm, CMTF_035_over[[1]]$Fac[[1]])
sample(df2)
sample(df2@data)
sample(1,df2@data)
?sample
produce_NA
?produce_NA
library(MASS)
library(norm)
install.packages("norm")
library(norm)
library(VIM)
install.packages("VIM")
library(VIM)
library(ggplot2)
library(naniar)
install.packages("naniar")
library(naniar)
?produce_NA
??produce_NA
library(devtools)
??produce_NA
source_url('https://raw.githubusercontent.com/R-miss-tastic/website/master/static/how-to/generate/amputation.R')
install.packages("gdata")
install.packages("mice")
install.packages("mltools")
source_url('https://raw.githubusercontent.com/R-miss-tastic/website/master/static/how-to/generate/amputation.R')
?produce_NA
produce_NA
produce_NA(df2@data, perc.missing=0.8)
seq(0.3, 0.9, 0.1)
result=produce_NA(df2@data, perc.missing=0.8)
missingNess = c(seq(0.3, 0.9, 0.1), 0.95, 0.99)
missingIndices = list()
df1_list = list()
for(i in 1:length(missingNess)){
outcome = produce_NA(df1@data, mechanism="MCAR", perc.missing=missingNess[i])
df1_list[[i]] = as.tensor(outcome$data.incomp)
missingIndices[[i]] = outcome$idx_newNA
}
i=1
produce_NA(df1@data, mechanism="MCAR", perc.missing=missingNess[i])
